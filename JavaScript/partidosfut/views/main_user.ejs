<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <title>Principal JUGADOR</title>
</head>
<body>
  <h1>Hola, <%= user.nombre %>!</h1>
  <p>¡Bienvenido a la página principal!</p>

  <!-- Toasts -->
  <div id="toast-container" class="toast-container position-fixed top-0 end-0 p-3">
    <!-- El toast se agregará aquí dinámicamente -->
  </div>

  <!-- Mostrar notificaciones no leídas -->
  <div id="notificaciones" class="mb-4">
    <% if (notificaciones.length > 0) { %>
      <h4>Notificaciones</h4>
      <ul class="list-group">
        <% notificaciones.forEach(function(noti) { %>
          <li class="list-group-item d-flex justify-content-between align-items-center">
            <span><%= noti.contenido %> Fecha: <%= new Date(noti.fecha_partido).toLocaleDateString('es-ES') + ' ' + new Date(noti.fecha_partido).toLocaleTimeString('es-ES', { hour12: false }) %></span>
            <button 
              class="btn btn-sm btn-success marcar-leida" 
              data-id="<%= noti.id_notificacion %>"> <!-- Corregido el id a id_notificacion -->
              Marcar como leída
            </button>
          </li>
        <% }); %>
      </ul>
    <% } else { %>
      <p>No tienes notificaciones nuevas.</p>
    <% } %>
  </div>

  <!-- Formulario de suscripción -->
  <div>
    <label for="suscripcion">Modelo de suscripción:</label>
    <select id="suscripcion" class="form-select mb-3" onchange="actualizarSuscripcion()">
      <option value="OCASIONAL" <%= user.model_sel === 'OCASIONAL' ? 'selected' : '' %>>OCASIONAL</option>
      <option value="FRECUENTE" <%= user.model_sel === 'FRECUENTE' ? 'selected' : '' %>>FRECUENTE</option>
      <option value="NO DISPONIBLE" <%= user.model_sel === 'NO DISPONIBLE' ? 'selected' : '' %>>NO DISPONIBLE</option>
    </select>
  </div>

  <form action="#" method="post">
    <button type="submit" class="btn btn-primary">Consultar Infracciones</button>
  </form>

  <form action="#" method="post">
    <button type="submit" class="btn btn-primary">Gestionar Participación</button>
  </form>

  <a href="/logout">Cerrar sesión</a>

  <script>
    // Función para manejar el cambio de modelo de suscripción
    function actualizarSuscripcion() {
      const suscripcion = document.getElementById('suscripcion').value;
      const idUsuario = <%= user.id_usuario %>;  // Ahora usando id_usuario de la sesión

      fetch('/actualizar_suscripcion', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ id_usuario: idUsuario, suscripcion: suscripcion })
      })
      .then(response => response.json())
      .then(data => {
        if (data.success) {
          mostrarToast(data.message, data.success);
        } else {
          // Si no se pudo cambiar, volvemos a la suscripción anterior
          document.getElementById('suscripcion').value = <%= user.model_sel %>;
          mostrarToast(data.message, data.success);
        }
      })
      .catch(err => console.error('Error al actualizar suscripción:', err));
    }

    // Función para mostrar el toast con el mensaje
    function mostrarToast(message, success) {
      const toastContainer = document.getElementById('toast-container');
      const toast = document.createElement('div');
      toast.classList.add('toast');
      toast.classList.add(success ? 'bg-success' : 'bg-danger');
      toast.setAttribute('role', 'alert');
      toast.setAttribute('aria-live', 'assertive');
      toast.setAttribute('aria-atomic', 'true');
      toast.innerHTML = `
        <div class="toast-body">
          ${message}
        </div>
      `;
      
      toastContainer.appendChild(toast);
      const toastInstance = new bootstrap.Toast(toast);
      toastInstance.show();
      
      setTimeout(() => {
        toastContainer.removeChild(toast);
      }, 3000);  // El toast se elimina después de 3 segundos
    }

    // Marcar una notificación como leída
    document.addEventListener('click', function(event) {
      if (event.target && event.target.classList.contains('marcar-leida')) {
        const idNotificacion = event.target.getAttribute('data-id');
        
        fetch('/marcar_leida', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ id_notificacion: idNotificacion })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Eliminar la notificación del DOM
            event.target.closest('li').remove();
          } else {
            mostrarToast('Hubo un error al marcar la notificación como leída.', false);
          }
        })
        .catch(err => {
          console.error('Error al marcar la notificación como leída:', err);
          mostrarToast('Hubo un error al marcar la notificación como leída.', false);
        });
      }
    });
  </script>

  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>
