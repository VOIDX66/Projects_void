Grammar:

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> class_decl
Rule 5     decl -> func_decl
Rule 6     decl -> var_decl
Rule 7     var_decl -> type_spec IDENT [ expr ] ;
Rule 8     var_decl -> type_spec IDENT [ ] ;
Rule 9     var_decl -> var_decl IDENT = expr ;
Rule 10    var_decl -> type_spec IDENT ;
Rule 11    type_spec -> CHAR
Rule 12    type_spec -> DOUBLE
Rule 13    type_spec -> FLOAT
Rule 14    type_spec -> INT
Rule 15    type_spec -> BOOL
Rule 16    type_spec -> VOID
Rule 17    func_decl -> type_spec IDENT ( params ) compound_stmt
Rule 18    params -> VOID
Rule 19    params -> param_list
Rule 20    param_list -> param _1_0x2c_param_repeat
Rule 21    _1_0x2c_param_repeat -> _1_0x2c_param_items
Rule 22    _1_0x2c_param_repeat -> <empty>
Rule 23    _1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item
Rule 24    _1_0x2c_param_items -> _1_0x2c_param_item
Rule 25    _1_0x2c_param_item -> , param
Rule 26    param -> type_spec IDENT [ ]
Rule 27    param -> type_spec IDENT
Rule 28    compound_stmt -> { local_decls stmt_list }
Rule 29    local_decls -> empty
Rule 30    local_decls -> local_decl local_decls
Rule 31    local_decl -> var_decl
Rule 32    stmt_list -> empty
Rule 33    stmt_list -> stmt stmt_list
Rule 34    stmt -> break_stmt
Rule 35    stmt -> return_stmt
Rule 36    stmt -> while_stmt
Rule 37    stmt -> if_stmt
Rule 38    stmt -> compound_stmt
Rule 39    stmt -> expr_stmt
Rule 40    class_decl -> CLASS IDENT { var_decl_list }
Rule 41    var_decl_list -> var_decl
Rule 42    var_decl_list -> var_decl_list var_decl
Rule 43    expr_stmt -> ;
Rule 44    expr_stmt -> expr ;
Rule 45    while_stmt -> WHILE ( expr ) stmt
Rule 46    if_stmt -> IF ( expr ) stmt ELSE stmt  [precedence=nonassoc, level=2]
Rule 47    if_stmt -> IF ( expr ) stmt
Rule 48    return_stmt -> RETURN ;
Rule 49    return_stmt -> RETURN expr ;
Rule 50    break_stmt -> CONTINUE ;
Rule 51    break_stmt -> BREAK ;
Rule 52    expr -> NEW type_spec [ expr ]
Rule 53    expr -> CHAR_LIT
Rule 54    expr -> STRING_LIT
Rule 55    expr -> FLOAT_LIT
Rule 56    expr -> INT_LIT
Rule 57    expr -> BOOL_LIT
Rule 58    expr -> IDENT . SIZE
Rule 59    expr -> IDENT ( args )
Rule 60    expr -> IDENT [ expr ]
Rule 61    expr -> IDENT
Rule 62    expr -> ( expr )
Rule 63    expr -> + expr  [precedence=right, level=10]
Rule 64    expr -> - expr  [precedence=right, level=10]
Rule 65    expr -> ! expr  [precedence=right, level=10]
Rule 66    expr -> expr % expr  [precedence=left, level=9]
Rule 67    expr -> expr / expr  [precedence=left, level=9]
Rule 68    expr -> expr * expr  [precedence=left, level=9]
Rule 69    expr -> expr - expr  [precedence=left, level=8]
Rule 70    expr -> expr + expr  [precedence=left, level=8]
Rule 71    expr -> expr > expr  [precedence=left, level=7]
Rule 72    expr -> expr GE expr  [precedence=left, level=7]
Rule 73    expr -> expr < expr  [precedence=left, level=7]
Rule 74    expr -> expr LE expr  [precedence=left, level=7]
Rule 75    expr -> expr NE expr  [precedence=left, level=6]
Rule 76    expr -> expr EQ expr  [precedence=left, level=6]
Rule 77    expr -> expr AND expr  [precedence=left, level=5]
Rule 78    expr -> expr OR expr  [precedence=left, level=4]
Rule 79    expr -> IDENT [ expr ] = expr  [precedence=right, level=3]
Rule 80    expr -> IDENT = expr  [precedence=right, level=3]
Rule 81    args -> empty
Rule 82    args -> arg_list
Rule 83    arg_list -> expr _2_0x2c_expr_optional
Rule 84    _2_0x2c_expr_optional -> , expr
Rule 85    _2_0x2c_expr_optional -> <empty>
Rule 86    empty -> <empty>

Terminals, with rules where they appear:

!                    : 65
%                    : 66
(                    : 17 45 46 47 59 62
)                    : 17 45 46 47 59 62
*                    : 68
+                    : 63 70
,                    : 25 84
-                    : 64 69
.                    : 58
/                    : 67
;                    : 7 8 9 10 43 44 48 49 50 51
<                    : 73
=                    : 9 79 80
>                    : 71
AND                  : 77
BOOL                 : 15
BOOL_LIT             : 57
BREAK                : 51
CHAR                 : 11
CHAR_LIT             : 53
CLASS                : 40
CONTINUE             : 50
DOUBLE               : 12
ELSE                 : 46
EQ                   : 76
FLOAT                : 13
FLOAT_LIT            : 55
GE                   : 72
IDENT                : 7 8 9 10 17 26 27 40 58 59 60 61 79 80
IF                   : 46 47
INT                  : 14
INT_LIT              : 56
LE                   : 74
NE                   : 75
NEW                  : 52
OR                   : 78
RETURN               : 48 49
SIZE                 : 58
STRING_LIT           : 54
VOID                 : 16 18
WHILE                : 45
[                    : 7 8 26 52 60 79
]                    : 7 8 26 52 60 79
error                : 
{                    : 28 40
}                    : 28 40

Nonterminals, with rules where they appear:

_1_0x2c_param_item   : 23 24
_1_0x2c_param_items  : 21 23
_1_0x2c_param_repeat : 20
_2_0x2c_expr_optional : 83
arg_list             : 82
args                 : 59
break_stmt           : 34
class_decl           : 4
compound_stmt        : 17 38
decl                 : 2 3
decl_list            : 1 3
empty                : 29 32 81
expr                 : 7 9 44 45 46 47 49 52 60 62 63 64 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 79 80 83 84
expr_stmt            : 39
func_decl            : 5
if_stmt              : 37
local_decl           : 30
local_decls          : 28 30
param                : 20 25
param_list           : 19
params               : 17
program              : 0
return_stmt          : 35
stmt                 : 33 45 46 46 47
stmt_list            : 28 33
type_spec            : 7 8 10 17 26 27 52
var_decl             : 6 9 31 41 42
var_decl_list        : 40 42
while_stmt           : 36


state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . class_decl
    (5) decl -> . func_decl
    (6) decl -> . var_decl
    (40) class_decl -> . CLASS IDENT { var_decl_list }
    (17) func_decl -> . type_spec IDENT ( params ) compound_stmt
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CLASS           shift and go to state 7
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    class_decl                     shift and go to state 4
    func_decl                      shift and go to state 5
    var_decl                       shift and go to state 6
    type_spec                      shift and go to state 8

state 1

    (0) S' -> program .


state 2

    (1) program -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . class_decl
    (5) decl -> . func_decl
    (6) decl -> . var_decl
    (40) class_decl -> . CLASS IDENT { var_decl_list }
    (17) func_decl -> . type_spec IDENT ( params ) compound_stmt
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    $end            reduce using rule 1 (program -> decl_list .)
    CLASS           shift and go to state 7
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    decl                           shift and go to state 15
    class_decl                     shift and go to state 4
    func_decl                      shift and go to state 5
    var_decl                       shift and go to state 6
    type_spec                      shift and go to state 8

state 3

    (2) decl_list -> decl .
    CLASS           reduce using rule 2 (decl_list -> decl .)
    CHAR            reduce using rule 2 (decl_list -> decl .)
    DOUBLE          reduce using rule 2 (decl_list -> decl .)
    FLOAT           reduce using rule 2 (decl_list -> decl .)
    INT             reduce using rule 2 (decl_list -> decl .)
    BOOL            reduce using rule 2 (decl_list -> decl .)
    VOID            reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> class_decl .
    CLASS           reduce using rule 4 (decl -> class_decl .)
    CHAR            reduce using rule 4 (decl -> class_decl .)
    DOUBLE          reduce using rule 4 (decl -> class_decl .)
    FLOAT           reduce using rule 4 (decl -> class_decl .)
    INT             reduce using rule 4 (decl -> class_decl .)
    BOOL            reduce using rule 4 (decl -> class_decl .)
    VOID            reduce using rule 4 (decl -> class_decl .)
    $end            reduce using rule 4 (decl -> class_decl .)


state 5

    (5) decl -> func_decl .
    CLASS           reduce using rule 5 (decl -> func_decl .)
    CHAR            reduce using rule 5 (decl -> func_decl .)
    DOUBLE          reduce using rule 5 (decl -> func_decl .)
    FLOAT           reduce using rule 5 (decl -> func_decl .)
    INT             reduce using rule 5 (decl -> func_decl .)
    BOOL            reduce using rule 5 (decl -> func_decl .)
    VOID            reduce using rule 5 (decl -> func_decl .)
    $end            reduce using rule 5 (decl -> func_decl .)


state 6

    (6) decl -> var_decl .
    (9) var_decl -> var_decl . IDENT = expr ;
    CLASS           reduce using rule 6 (decl -> var_decl .)
    CHAR            reduce using rule 6 (decl -> var_decl .)
    DOUBLE          reduce using rule 6 (decl -> var_decl .)
    FLOAT           reduce using rule 6 (decl -> var_decl .)
    INT             reduce using rule 6 (decl -> var_decl .)
    BOOL            reduce using rule 6 (decl -> var_decl .)
    VOID            reduce using rule 6 (decl -> var_decl .)
    $end            reduce using rule 6 (decl -> var_decl .)
    IDENT           shift and go to state 16


state 7

    (40) class_decl -> CLASS . IDENT { var_decl_list }
    IDENT           shift and go to state 17


state 8

    (17) func_decl -> type_spec . IDENT ( params ) compound_stmt
    (7) var_decl -> type_spec . IDENT [ expr ] ;
    (8) var_decl -> type_spec . IDENT [ ] ;
    (10) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 18


state 9

    (11) type_spec -> CHAR .
    IDENT           reduce using rule 11 (type_spec -> CHAR .)
    [               reduce using rule 11 (type_spec -> CHAR .)


state 10

    (12) type_spec -> DOUBLE .
    IDENT           reduce using rule 12 (type_spec -> DOUBLE .)
    [               reduce using rule 12 (type_spec -> DOUBLE .)


state 11

    (13) type_spec -> FLOAT .
    IDENT           reduce using rule 13 (type_spec -> FLOAT .)
    [               reduce using rule 13 (type_spec -> FLOAT .)


state 12

    (14) type_spec -> INT .
    IDENT           reduce using rule 14 (type_spec -> INT .)
    [               reduce using rule 14 (type_spec -> INT .)


state 13

    (15) type_spec -> BOOL .
    IDENT           reduce using rule 15 (type_spec -> BOOL .)
    [               reduce using rule 15 (type_spec -> BOOL .)


state 14

    (16) type_spec -> VOID .
    IDENT           reduce using rule 16 (type_spec -> VOID .)
    [               reduce using rule 16 (type_spec -> VOID .)


state 15

    (3) decl_list -> decl_list decl .
    CLASS           reduce using rule 3 (decl_list -> decl_list decl .)
    CHAR            reduce using rule 3 (decl_list -> decl_list decl .)
    DOUBLE          reduce using rule 3 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 3 (decl_list -> decl_list decl .)
    INT             reduce using rule 3 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 3 (decl_list -> decl_list decl .)
    VOID            reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 16

    (9) var_decl -> var_decl IDENT . = expr ;
    =               shift and go to state 19


state 17

    (40) class_decl -> CLASS IDENT . { var_decl_list }
    {               shift and go to state 20


state 18

    (17) func_decl -> type_spec IDENT . ( params ) compound_stmt
    (7) var_decl -> type_spec IDENT . [ expr ] ;
    (8) var_decl -> type_spec IDENT . [ ] ;
    (10) var_decl -> type_spec IDENT . ;
    (               shift and go to state 21
    [               shift and go to state 22
    ;               shift and go to state 23


state 19

    (9) var_decl -> var_decl IDENT = . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 25

state 20

    (40) class_decl -> CLASS IDENT { . var_decl_list }
    (41) var_decl_list -> . var_decl
    (42) var_decl_list -> . var_decl_list var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    var_decl_list                  shift and go to state 36
    var_decl                       shift and go to state 37
    type_spec                      shift and go to state 38

state 21

    (17) func_decl -> type_spec IDENT ( . params ) compound_stmt
    (18) params -> . VOID
    (19) params -> . param_list
    (20) param_list -> . param _1_0x2c_param_repeat
    (26) param -> . type_spec IDENT [ ]
    (27) param -> . type_spec IDENT
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    VOID            shift and go to state 41
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13

    type_spec                      shift and go to state 39
    params                         shift and go to state 40
    param_list                     shift and go to state 42
    param                          shift and go to state 43

state 22

    (7) var_decl -> type_spec IDENT [ . expr ] ;
    (8) var_decl -> type_spec IDENT [ . ] ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    ]               shift and go to state 45
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 44

state 23

    (10) var_decl -> type_spec IDENT ; .
    IDENT           reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    CLASS           reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    CHAR            reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    DOUBLE          reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    INT             reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    $end            reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    }               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    CONTINUE        reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    BREAK           reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    RETURN          reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    WHILE           reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    IF              reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    {               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    ;               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    NEW             reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    CHAR_LIT        reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    STRING_LIT      reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    FLOAT_LIT       reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    INT_LIT         reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    BOOL_LIT        reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    (               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    +               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    -               reduce using rule 10 (var_decl -> type_spec IDENT ; .)
    !               reduce using rule 10 (var_decl -> type_spec IDENT ; .)


state 24

    (58) expr -> IDENT . . SIZE
    (59) expr -> IDENT . ( args )
    (60) expr -> IDENT . [ expr ]
    (61) expr -> IDENT .
    (79) expr -> IDENT . [ expr ] = expr
    (80) expr -> IDENT . = expr
    .               shift and go to state 46
    (               shift and go to state 47
    [               shift and go to state 48
    ;               reduce using rule 61 (expr -> IDENT .)
    %               reduce using rule 61 (expr -> IDENT .)
    /               reduce using rule 61 (expr -> IDENT .)
    *               reduce using rule 61 (expr -> IDENT .)
    -               reduce using rule 61 (expr -> IDENT .)
    +               reduce using rule 61 (expr -> IDENT .)
    >               reduce using rule 61 (expr -> IDENT .)
    GE              reduce using rule 61 (expr -> IDENT .)
    <               reduce using rule 61 (expr -> IDENT .)
    LE              reduce using rule 61 (expr -> IDENT .)
    NE              reduce using rule 61 (expr -> IDENT .)
    EQ              reduce using rule 61 (expr -> IDENT .)
    AND             reduce using rule 61 (expr -> IDENT .)
    OR              reduce using rule 61 (expr -> IDENT .)
    ]               reduce using rule 61 (expr -> IDENT .)
    )               reduce using rule 61 (expr -> IDENT .)
    ,               reduce using rule 61 (expr -> IDENT .)
    =               shift and go to state 49


state 25

    (9) var_decl -> var_decl IDENT = expr . ;
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               shift and go to state 50
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 26

    (52) expr -> NEW . type_spec [ expr ]
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    type_spec                      shift and go to state 64

state 27

    (53) expr -> CHAR_LIT .
    ;               reduce using rule 53 (expr -> CHAR_LIT .)
    %               reduce using rule 53 (expr -> CHAR_LIT .)
    /               reduce using rule 53 (expr -> CHAR_LIT .)
    *               reduce using rule 53 (expr -> CHAR_LIT .)
    -               reduce using rule 53 (expr -> CHAR_LIT .)
    +               reduce using rule 53 (expr -> CHAR_LIT .)
    >               reduce using rule 53 (expr -> CHAR_LIT .)
    GE              reduce using rule 53 (expr -> CHAR_LIT .)
    <               reduce using rule 53 (expr -> CHAR_LIT .)
    LE              reduce using rule 53 (expr -> CHAR_LIT .)
    NE              reduce using rule 53 (expr -> CHAR_LIT .)
    EQ              reduce using rule 53 (expr -> CHAR_LIT .)
    AND             reduce using rule 53 (expr -> CHAR_LIT .)
    OR              reduce using rule 53 (expr -> CHAR_LIT .)
    ]               reduce using rule 53 (expr -> CHAR_LIT .)
    )               reduce using rule 53 (expr -> CHAR_LIT .)
    ,               reduce using rule 53 (expr -> CHAR_LIT .)


state 28

    (54) expr -> STRING_LIT .
    ;               reduce using rule 54 (expr -> STRING_LIT .)
    %               reduce using rule 54 (expr -> STRING_LIT .)
    /               reduce using rule 54 (expr -> STRING_LIT .)
    *               reduce using rule 54 (expr -> STRING_LIT .)
    -               reduce using rule 54 (expr -> STRING_LIT .)
    +               reduce using rule 54 (expr -> STRING_LIT .)
    >               reduce using rule 54 (expr -> STRING_LIT .)
    GE              reduce using rule 54 (expr -> STRING_LIT .)
    <               reduce using rule 54 (expr -> STRING_LIT .)
    LE              reduce using rule 54 (expr -> STRING_LIT .)
    NE              reduce using rule 54 (expr -> STRING_LIT .)
    EQ              reduce using rule 54 (expr -> STRING_LIT .)
    AND             reduce using rule 54 (expr -> STRING_LIT .)
    OR              reduce using rule 54 (expr -> STRING_LIT .)
    ]               reduce using rule 54 (expr -> STRING_LIT .)
    )               reduce using rule 54 (expr -> STRING_LIT .)
    ,               reduce using rule 54 (expr -> STRING_LIT .)


state 29

    (55) expr -> FLOAT_LIT .
    ;               reduce using rule 55 (expr -> FLOAT_LIT .)
    %               reduce using rule 55 (expr -> FLOAT_LIT .)
    /               reduce using rule 55 (expr -> FLOAT_LIT .)
    *               reduce using rule 55 (expr -> FLOAT_LIT .)
    -               reduce using rule 55 (expr -> FLOAT_LIT .)
    +               reduce using rule 55 (expr -> FLOAT_LIT .)
    >               reduce using rule 55 (expr -> FLOAT_LIT .)
    GE              reduce using rule 55 (expr -> FLOAT_LIT .)
    <               reduce using rule 55 (expr -> FLOAT_LIT .)
    LE              reduce using rule 55 (expr -> FLOAT_LIT .)
    NE              reduce using rule 55 (expr -> FLOAT_LIT .)
    EQ              reduce using rule 55 (expr -> FLOAT_LIT .)
    AND             reduce using rule 55 (expr -> FLOAT_LIT .)
    OR              reduce using rule 55 (expr -> FLOAT_LIT .)
    ]               reduce using rule 55 (expr -> FLOAT_LIT .)
    )               reduce using rule 55 (expr -> FLOAT_LIT .)
    ,               reduce using rule 55 (expr -> FLOAT_LIT .)


state 30

    (56) expr -> INT_LIT .
    ;               reduce using rule 56 (expr -> INT_LIT .)
    %               reduce using rule 56 (expr -> INT_LIT .)
    /               reduce using rule 56 (expr -> INT_LIT .)
    *               reduce using rule 56 (expr -> INT_LIT .)
    -               reduce using rule 56 (expr -> INT_LIT .)
    +               reduce using rule 56 (expr -> INT_LIT .)
    >               reduce using rule 56 (expr -> INT_LIT .)
    GE              reduce using rule 56 (expr -> INT_LIT .)
    <               reduce using rule 56 (expr -> INT_LIT .)
    LE              reduce using rule 56 (expr -> INT_LIT .)
    NE              reduce using rule 56 (expr -> INT_LIT .)
    EQ              reduce using rule 56 (expr -> INT_LIT .)
    AND             reduce using rule 56 (expr -> INT_LIT .)
    OR              reduce using rule 56 (expr -> INT_LIT .)
    ]               reduce using rule 56 (expr -> INT_LIT .)
    )               reduce using rule 56 (expr -> INT_LIT .)
    ,               reduce using rule 56 (expr -> INT_LIT .)


state 31

    (57) expr -> BOOL_LIT .
    ;               reduce using rule 57 (expr -> BOOL_LIT .)
    %               reduce using rule 57 (expr -> BOOL_LIT .)
    /               reduce using rule 57 (expr -> BOOL_LIT .)
    *               reduce using rule 57 (expr -> BOOL_LIT .)
    -               reduce using rule 57 (expr -> BOOL_LIT .)
    +               reduce using rule 57 (expr -> BOOL_LIT .)
    >               reduce using rule 57 (expr -> BOOL_LIT .)
    GE              reduce using rule 57 (expr -> BOOL_LIT .)
    <               reduce using rule 57 (expr -> BOOL_LIT .)
    LE              reduce using rule 57 (expr -> BOOL_LIT .)
    NE              reduce using rule 57 (expr -> BOOL_LIT .)
    EQ              reduce using rule 57 (expr -> BOOL_LIT .)
    AND             reduce using rule 57 (expr -> BOOL_LIT .)
    OR              reduce using rule 57 (expr -> BOOL_LIT .)
    ]               reduce using rule 57 (expr -> BOOL_LIT .)
    )               reduce using rule 57 (expr -> BOOL_LIT .)
    ,               reduce using rule 57 (expr -> BOOL_LIT .)


state 32

    (62) expr -> ( . expr )
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 65

state 33

    (63) expr -> + . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 66

state 34

    (64) expr -> - . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 67

state 35

    (65) expr -> ! . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 68

state 36

    (40) class_decl -> CLASS IDENT { var_decl_list . }
    (42) var_decl_list -> var_decl_list . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    }               shift and go to state 69
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    var_decl                       shift and go to state 70
    type_spec                      shift and go to state 38

state 37

    (41) var_decl_list -> var_decl .
    (9) var_decl -> var_decl . IDENT = expr ;
    }               reduce using rule 41 (var_decl_list -> var_decl .)
    CHAR            reduce using rule 41 (var_decl_list -> var_decl .)
    DOUBLE          reduce using rule 41 (var_decl_list -> var_decl .)
    FLOAT           reduce using rule 41 (var_decl_list -> var_decl .)
    INT             reduce using rule 41 (var_decl_list -> var_decl .)
    BOOL            reduce using rule 41 (var_decl_list -> var_decl .)
    VOID            reduce using rule 41 (var_decl_list -> var_decl .)
    IDENT           shift and go to state 16


state 38

    (7) var_decl -> type_spec . IDENT [ expr ] ;
    (8) var_decl -> type_spec . IDENT [ ] ;
    (10) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 71


state 39

    (26) param -> type_spec . IDENT [ ]
    (27) param -> type_spec . IDENT
    IDENT           shift and go to state 72


state 40

    (17) func_decl -> type_spec IDENT ( params . ) compound_stmt
    )               shift and go to state 73


state 41

    (18) params -> VOID .
    (16) type_spec -> VOID .
    )               reduce using rule 18 (params -> VOID .)
    IDENT           reduce using rule 16 (type_spec -> VOID .)


state 42

    (19) params -> param_list .
    )               reduce using rule 19 (params -> param_list .)


state 43

    (20) param_list -> param . _1_0x2c_param_repeat
    (21) _1_0x2c_param_repeat -> . _1_0x2c_param_items
    (22) _1_0x2c_param_repeat -> .
    (23) _1_0x2c_param_items -> . _1_0x2c_param_items _1_0x2c_param_item
    (24) _1_0x2c_param_items -> . _1_0x2c_param_item
    (25) _1_0x2c_param_item -> . , param
    )               reduce using rule 22 (_1_0x2c_param_repeat -> .)
    ,               shift and go to state 77

    _1_0x2c_param_repeat           shift and go to state 74
    _1_0x2c_param_items            shift and go to state 75
    _1_0x2c_param_item             shift and go to state 76

state 44

    (7) var_decl -> type_spec IDENT [ expr . ] ;
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ]               shift and go to state 78
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 45

    (8) var_decl -> type_spec IDENT [ ] . ;
    ;               shift and go to state 79


state 46

    (58) expr -> IDENT . . SIZE
    SIZE            shift and go to state 80


state 47

    (59) expr -> IDENT ( . args )
    (81) args -> . empty
    (82) args -> . arg_list
    (86) empty -> .
    (83) arg_list -> . expr _2_0x2c_expr_optional
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    )               reduce using rule 86 (empty -> .)
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    args                           shift and go to state 81
    empty                          shift and go to state 82
    arg_list                       shift and go to state 83
    expr                           shift and go to state 84

state 48

    (60) expr -> IDENT [ . expr ]
    (79) expr -> IDENT [ . expr ] = expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 85

state 49

    (80) expr -> IDENT = . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 86

state 50

    (9) var_decl -> var_decl IDENT = expr ; .
    IDENT           reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    CLASS           reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    CHAR            reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    DOUBLE          reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    FLOAT           reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    INT             reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    BOOL            reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    VOID            reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    $end            reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    }               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    CONTINUE        reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    BREAK           reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    RETURN          reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    WHILE           reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    IF              reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    {               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    ;               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    NEW             reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    CHAR_LIT        reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    STRING_LIT      reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    FLOAT_LIT       reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    INT_LIT         reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    BOOL_LIT        reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    (               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    +               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    -               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)
    !               reduce using rule 9 (var_decl -> var_decl IDENT = expr ; .)


state 51

    (66) expr -> expr % . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 87

state 52

    (67) expr -> expr / . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 88

state 53

    (68) expr -> expr * . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 89

state 54

    (69) expr -> expr - . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 90

state 55

    (70) expr -> expr + . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 91

state 56

    (71) expr -> expr > . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 92

state 57

    (72) expr -> expr GE . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 93

state 58

    (73) expr -> expr < . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 94

state 59

    (74) expr -> expr LE . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 95

state 60

    (75) expr -> expr NE . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 96

state 61

    (76) expr -> expr EQ . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 97

state 62

    (77) expr -> expr AND . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 98

state 63

    (78) expr -> expr OR . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 99

state 64

    (52) expr -> NEW type_spec . [ expr ]
    [               shift and go to state 100


state 65

    (62) expr -> ( expr . )
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    )               shift and go to state 101
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 66

    (63) expr -> + expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 63 (expr -> + expr .)
    %               reduce using rule 63 (expr -> + expr .)
    /               reduce using rule 63 (expr -> + expr .)
    *               reduce using rule 63 (expr -> + expr .)
    -               reduce using rule 63 (expr -> + expr .)
    +               reduce using rule 63 (expr -> + expr .)
    >               reduce using rule 63 (expr -> + expr .)
    GE              reduce using rule 63 (expr -> + expr .)
    <               reduce using rule 63 (expr -> + expr .)
    LE              reduce using rule 63 (expr -> + expr .)
    NE              reduce using rule 63 (expr -> + expr .)
    EQ              reduce using rule 63 (expr -> + expr .)
    AND             reduce using rule 63 (expr -> + expr .)
    OR              reduce using rule 63 (expr -> + expr .)
    ]               reduce using rule 63 (expr -> + expr .)
    )               reduce using rule 63 (expr -> + expr .)
    ,               reduce using rule 63 (expr -> + expr .)


state 67

    (64) expr -> - expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 64 (expr -> - expr .)
    %               reduce using rule 64 (expr -> - expr .)
    /               reduce using rule 64 (expr -> - expr .)
    *               reduce using rule 64 (expr -> - expr .)
    -               reduce using rule 64 (expr -> - expr .)
    +               reduce using rule 64 (expr -> - expr .)
    >               reduce using rule 64 (expr -> - expr .)
    GE              reduce using rule 64 (expr -> - expr .)
    <               reduce using rule 64 (expr -> - expr .)
    LE              reduce using rule 64 (expr -> - expr .)
    NE              reduce using rule 64 (expr -> - expr .)
    EQ              reduce using rule 64 (expr -> - expr .)
    AND             reduce using rule 64 (expr -> - expr .)
    OR              reduce using rule 64 (expr -> - expr .)
    ]               reduce using rule 64 (expr -> - expr .)
    )               reduce using rule 64 (expr -> - expr .)
    ,               reduce using rule 64 (expr -> - expr .)


state 68

    (65) expr -> ! expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 65 (expr -> ! expr .)
    %               reduce using rule 65 (expr -> ! expr .)
    /               reduce using rule 65 (expr -> ! expr .)
    *               reduce using rule 65 (expr -> ! expr .)
    -               reduce using rule 65 (expr -> ! expr .)
    +               reduce using rule 65 (expr -> ! expr .)
    >               reduce using rule 65 (expr -> ! expr .)
    GE              reduce using rule 65 (expr -> ! expr .)
    <               reduce using rule 65 (expr -> ! expr .)
    LE              reduce using rule 65 (expr -> ! expr .)
    NE              reduce using rule 65 (expr -> ! expr .)
    EQ              reduce using rule 65 (expr -> ! expr .)
    AND             reduce using rule 65 (expr -> ! expr .)
    OR              reduce using rule 65 (expr -> ! expr .)
    ]               reduce using rule 65 (expr -> ! expr .)
    )               reduce using rule 65 (expr -> ! expr .)
    ,               reduce using rule 65 (expr -> ! expr .)


state 69

    (40) class_decl -> CLASS IDENT { var_decl_list } .
    CLASS           reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    CHAR            reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    DOUBLE          reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    FLOAT           reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    INT             reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    BOOL            reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    VOID            reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)
    $end            reduce using rule 40 (class_decl -> CLASS IDENT { var_decl_list } .)


state 70

    (42) var_decl_list -> var_decl_list var_decl .
    (9) var_decl -> var_decl . IDENT = expr ;
    }               reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    CHAR            reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    DOUBLE          reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    FLOAT           reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    INT             reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    BOOL            reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    VOID            reduce using rule 42 (var_decl_list -> var_decl_list var_decl .)
    IDENT           shift and go to state 16


state 71

    (7) var_decl -> type_spec IDENT . [ expr ] ;
    (8) var_decl -> type_spec IDENT . [ ] ;
    (10) var_decl -> type_spec IDENT . ;
    [               shift and go to state 22
    ;               shift and go to state 23


state 72

    (26) param -> type_spec IDENT . [ ]
    (27) param -> type_spec IDENT .
    [               shift and go to state 102
    ,               reduce using rule 27 (param -> type_spec IDENT .)
    )               reduce using rule 27 (param -> type_spec IDENT .)


state 73

    (17) func_decl -> type_spec IDENT ( params ) . compound_stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 104

    compound_stmt                  shift and go to state 103

state 74

    (20) param_list -> param _1_0x2c_param_repeat .
    )               reduce using rule 20 (param_list -> param _1_0x2c_param_repeat .)


state 75

    (21) _1_0x2c_param_repeat -> _1_0x2c_param_items .
    (23) _1_0x2c_param_items -> _1_0x2c_param_items . _1_0x2c_param_item
    (25) _1_0x2c_param_item -> . , param
    )               reduce using rule 21 (_1_0x2c_param_repeat -> _1_0x2c_param_items .)
    ,               shift and go to state 77

    _1_0x2c_param_item             shift and go to state 105

state 76

    (24) _1_0x2c_param_items -> _1_0x2c_param_item .
    ,               reduce using rule 24 (_1_0x2c_param_items -> _1_0x2c_param_item .)
    )               reduce using rule 24 (_1_0x2c_param_items -> _1_0x2c_param_item .)


state 77

    (25) _1_0x2c_param_item -> , . param
    (26) param -> . type_spec IDENT [ ]
    (27) param -> . type_spec IDENT
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    param                          shift and go to state 106
    type_spec                      shift and go to state 39

state 78

    (7) var_decl -> type_spec IDENT [ expr ] . ;
    ;               shift and go to state 107


state 79

    (8) var_decl -> type_spec IDENT [ ] ; .
    IDENT           reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    CLASS           reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    CHAR            reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    DOUBLE          reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    FLOAT           reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    INT             reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    BOOL            reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    VOID            reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    $end            reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    }               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    CONTINUE        reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    BREAK           reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    RETURN          reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    WHILE           reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    IF              reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    {               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    ;               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    NEW             reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    CHAR_LIT        reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    STRING_LIT      reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    FLOAT_LIT       reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    INT_LIT         reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    BOOL_LIT        reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    (               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    +               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    -               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)
    !               reduce using rule 8 (var_decl -> type_spec IDENT [ ] ; .)


state 80

    (58) expr -> IDENT . SIZE .
    ;               reduce using rule 58 (expr -> IDENT . SIZE .)
    %               reduce using rule 58 (expr -> IDENT . SIZE .)
    /               reduce using rule 58 (expr -> IDENT . SIZE .)
    *               reduce using rule 58 (expr -> IDENT . SIZE .)
    -               reduce using rule 58 (expr -> IDENT . SIZE .)
    +               reduce using rule 58 (expr -> IDENT . SIZE .)
    >               reduce using rule 58 (expr -> IDENT . SIZE .)
    GE              reduce using rule 58 (expr -> IDENT . SIZE .)
    <               reduce using rule 58 (expr -> IDENT . SIZE .)
    LE              reduce using rule 58 (expr -> IDENT . SIZE .)
    NE              reduce using rule 58 (expr -> IDENT . SIZE .)
    EQ              reduce using rule 58 (expr -> IDENT . SIZE .)
    AND             reduce using rule 58 (expr -> IDENT . SIZE .)
    OR              reduce using rule 58 (expr -> IDENT . SIZE .)
    ]               reduce using rule 58 (expr -> IDENT . SIZE .)
    )               reduce using rule 58 (expr -> IDENT . SIZE .)
    ,               reduce using rule 58 (expr -> IDENT . SIZE .)


state 81

    (59) expr -> IDENT ( args . )
    )               shift and go to state 108


state 82

    (81) args -> empty .
    )               reduce using rule 81 (args -> empty .)


state 83

    (82) args -> arg_list .
    )               reduce using rule 82 (args -> arg_list .)


state 84

    (83) arg_list -> expr . _2_0x2c_expr_optional
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    (84) _2_0x2c_expr_optional -> . , expr
    (85) _2_0x2c_expr_optional -> .
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63
    ,               shift and go to state 110
    )               reduce using rule 85 (_2_0x2c_expr_optional -> .)

    _2_0x2c_expr_optional          shift and go to state 109

state 85

    (60) expr -> IDENT [ expr . ]
    (79) expr -> IDENT [ expr . ] = expr
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ]               shift and go to state 111
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 86

    (80) expr -> IDENT = expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 80 (expr -> IDENT = expr .)
    ]               reduce using rule 80 (expr -> IDENT = expr .)
    )               reduce using rule 80 (expr -> IDENT = expr .)
    ,               reduce using rule 80 (expr -> IDENT = expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 87

    (66) expr -> expr % expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 66 (expr -> expr % expr .)
    %               reduce using rule 66 (expr -> expr % expr .)
    /               reduce using rule 66 (expr -> expr % expr .)
    *               reduce using rule 66 (expr -> expr % expr .)
    -               reduce using rule 66 (expr -> expr % expr .)
    +               reduce using rule 66 (expr -> expr % expr .)
    >               reduce using rule 66 (expr -> expr % expr .)
    GE              reduce using rule 66 (expr -> expr % expr .)
    <               reduce using rule 66 (expr -> expr % expr .)
    LE              reduce using rule 66 (expr -> expr % expr .)
    NE              reduce using rule 66 (expr -> expr % expr .)
    EQ              reduce using rule 66 (expr -> expr % expr .)
    AND             reduce using rule 66 (expr -> expr % expr .)
    OR              reduce using rule 66 (expr -> expr % expr .)
    ]               reduce using rule 66 (expr -> expr % expr .)
    )               reduce using rule 66 (expr -> expr % expr .)
    ,               reduce using rule 66 (expr -> expr % expr .)


state 88

    (67) expr -> expr / expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 67 (expr -> expr / expr .)
    %               reduce using rule 67 (expr -> expr / expr .)
    /               reduce using rule 67 (expr -> expr / expr .)
    *               reduce using rule 67 (expr -> expr / expr .)
    -               reduce using rule 67 (expr -> expr / expr .)
    +               reduce using rule 67 (expr -> expr / expr .)
    >               reduce using rule 67 (expr -> expr / expr .)
    GE              reduce using rule 67 (expr -> expr / expr .)
    <               reduce using rule 67 (expr -> expr / expr .)
    LE              reduce using rule 67 (expr -> expr / expr .)
    NE              reduce using rule 67 (expr -> expr / expr .)
    EQ              reduce using rule 67 (expr -> expr / expr .)
    AND             reduce using rule 67 (expr -> expr / expr .)
    OR              reduce using rule 67 (expr -> expr / expr .)
    ]               reduce using rule 67 (expr -> expr / expr .)
    )               reduce using rule 67 (expr -> expr / expr .)
    ,               reduce using rule 67 (expr -> expr / expr .)


state 89

    (68) expr -> expr * expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 68 (expr -> expr * expr .)
    %               reduce using rule 68 (expr -> expr * expr .)
    /               reduce using rule 68 (expr -> expr * expr .)
    *               reduce using rule 68 (expr -> expr * expr .)
    -               reduce using rule 68 (expr -> expr * expr .)
    +               reduce using rule 68 (expr -> expr * expr .)
    >               reduce using rule 68 (expr -> expr * expr .)
    GE              reduce using rule 68 (expr -> expr * expr .)
    <               reduce using rule 68 (expr -> expr * expr .)
    LE              reduce using rule 68 (expr -> expr * expr .)
    NE              reduce using rule 68 (expr -> expr * expr .)
    EQ              reduce using rule 68 (expr -> expr * expr .)
    AND             reduce using rule 68 (expr -> expr * expr .)
    OR              reduce using rule 68 (expr -> expr * expr .)
    ]               reduce using rule 68 (expr -> expr * expr .)
    )               reduce using rule 68 (expr -> expr * expr .)
    ,               reduce using rule 68 (expr -> expr * expr .)


state 90

    (69) expr -> expr - expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 69 (expr -> expr - expr .)
    -               reduce using rule 69 (expr -> expr - expr .)
    +               reduce using rule 69 (expr -> expr - expr .)
    >               reduce using rule 69 (expr -> expr - expr .)
    GE              reduce using rule 69 (expr -> expr - expr .)
    <               reduce using rule 69 (expr -> expr - expr .)
    LE              reduce using rule 69 (expr -> expr - expr .)
    NE              reduce using rule 69 (expr -> expr - expr .)
    EQ              reduce using rule 69 (expr -> expr - expr .)
    AND             reduce using rule 69 (expr -> expr - expr .)
    OR              reduce using rule 69 (expr -> expr - expr .)
    ]               reduce using rule 69 (expr -> expr - expr .)
    )               reduce using rule 69 (expr -> expr - expr .)
    ,               reduce using rule 69 (expr -> expr - expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53


state 91

    (70) expr -> expr + expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 70 (expr -> expr + expr .)
    -               reduce using rule 70 (expr -> expr + expr .)
    +               reduce using rule 70 (expr -> expr + expr .)
    >               reduce using rule 70 (expr -> expr + expr .)
    GE              reduce using rule 70 (expr -> expr + expr .)
    <               reduce using rule 70 (expr -> expr + expr .)
    LE              reduce using rule 70 (expr -> expr + expr .)
    NE              reduce using rule 70 (expr -> expr + expr .)
    EQ              reduce using rule 70 (expr -> expr + expr .)
    AND             reduce using rule 70 (expr -> expr + expr .)
    OR              reduce using rule 70 (expr -> expr + expr .)
    ]               reduce using rule 70 (expr -> expr + expr .)
    )               reduce using rule 70 (expr -> expr + expr .)
    ,               reduce using rule 70 (expr -> expr + expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53


state 92

    (71) expr -> expr > expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 71 (expr -> expr > expr .)
    >               reduce using rule 71 (expr -> expr > expr .)
    GE              reduce using rule 71 (expr -> expr > expr .)
    <               reduce using rule 71 (expr -> expr > expr .)
    LE              reduce using rule 71 (expr -> expr > expr .)
    NE              reduce using rule 71 (expr -> expr > expr .)
    EQ              reduce using rule 71 (expr -> expr > expr .)
    AND             reduce using rule 71 (expr -> expr > expr .)
    OR              reduce using rule 71 (expr -> expr > expr .)
    ]               reduce using rule 71 (expr -> expr > expr .)
    )               reduce using rule 71 (expr -> expr > expr .)
    ,               reduce using rule 71 (expr -> expr > expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55


state 93

    (72) expr -> expr GE expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 72 (expr -> expr GE expr .)
    >               reduce using rule 72 (expr -> expr GE expr .)
    GE              reduce using rule 72 (expr -> expr GE expr .)
    <               reduce using rule 72 (expr -> expr GE expr .)
    LE              reduce using rule 72 (expr -> expr GE expr .)
    NE              reduce using rule 72 (expr -> expr GE expr .)
    EQ              reduce using rule 72 (expr -> expr GE expr .)
    AND             reduce using rule 72 (expr -> expr GE expr .)
    OR              reduce using rule 72 (expr -> expr GE expr .)
    ]               reduce using rule 72 (expr -> expr GE expr .)
    )               reduce using rule 72 (expr -> expr GE expr .)
    ,               reduce using rule 72 (expr -> expr GE expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55


state 94

    (73) expr -> expr < expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 73 (expr -> expr < expr .)
    >               reduce using rule 73 (expr -> expr < expr .)
    GE              reduce using rule 73 (expr -> expr < expr .)
    <               reduce using rule 73 (expr -> expr < expr .)
    LE              reduce using rule 73 (expr -> expr < expr .)
    NE              reduce using rule 73 (expr -> expr < expr .)
    EQ              reduce using rule 73 (expr -> expr < expr .)
    AND             reduce using rule 73 (expr -> expr < expr .)
    OR              reduce using rule 73 (expr -> expr < expr .)
    ]               reduce using rule 73 (expr -> expr < expr .)
    )               reduce using rule 73 (expr -> expr < expr .)
    ,               reduce using rule 73 (expr -> expr < expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55


state 95

    (74) expr -> expr LE expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 74 (expr -> expr LE expr .)
    >               reduce using rule 74 (expr -> expr LE expr .)
    GE              reduce using rule 74 (expr -> expr LE expr .)
    <               reduce using rule 74 (expr -> expr LE expr .)
    LE              reduce using rule 74 (expr -> expr LE expr .)
    NE              reduce using rule 74 (expr -> expr LE expr .)
    EQ              reduce using rule 74 (expr -> expr LE expr .)
    AND             reduce using rule 74 (expr -> expr LE expr .)
    OR              reduce using rule 74 (expr -> expr LE expr .)
    ]               reduce using rule 74 (expr -> expr LE expr .)
    )               reduce using rule 74 (expr -> expr LE expr .)
    ,               reduce using rule 74 (expr -> expr LE expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55


state 96

    (75) expr -> expr NE expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 75 (expr -> expr NE expr .)
    NE              reduce using rule 75 (expr -> expr NE expr .)
    EQ              reduce using rule 75 (expr -> expr NE expr .)
    AND             reduce using rule 75 (expr -> expr NE expr .)
    OR              reduce using rule 75 (expr -> expr NE expr .)
    ]               reduce using rule 75 (expr -> expr NE expr .)
    )               reduce using rule 75 (expr -> expr NE expr .)
    ,               reduce using rule 75 (expr -> expr NE expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59


state 97

    (76) expr -> expr EQ expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 76 (expr -> expr EQ expr .)
    NE              reduce using rule 76 (expr -> expr EQ expr .)
    EQ              reduce using rule 76 (expr -> expr EQ expr .)
    AND             reduce using rule 76 (expr -> expr EQ expr .)
    OR              reduce using rule 76 (expr -> expr EQ expr .)
    ]               reduce using rule 76 (expr -> expr EQ expr .)
    )               reduce using rule 76 (expr -> expr EQ expr .)
    ,               reduce using rule 76 (expr -> expr EQ expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59


state 98

    (77) expr -> expr AND expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 77 (expr -> expr AND expr .)
    AND             reduce using rule 77 (expr -> expr AND expr .)
    OR              reduce using rule 77 (expr -> expr AND expr .)
    ]               reduce using rule 77 (expr -> expr AND expr .)
    )               reduce using rule 77 (expr -> expr AND expr .)
    ,               reduce using rule 77 (expr -> expr AND expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61


state 99

    (78) expr -> expr OR expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 78 (expr -> expr OR expr .)
    OR              reduce using rule 78 (expr -> expr OR expr .)
    ]               reduce using rule 78 (expr -> expr OR expr .)
    )               reduce using rule 78 (expr -> expr OR expr .)
    ,               reduce using rule 78 (expr -> expr OR expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62


state 100

    (52) expr -> NEW type_spec [ . expr ]
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 112

state 101

    (62) expr -> ( expr ) .
    ;               reduce using rule 62 (expr -> ( expr ) .)
    %               reduce using rule 62 (expr -> ( expr ) .)
    /               reduce using rule 62 (expr -> ( expr ) .)
    *               reduce using rule 62 (expr -> ( expr ) .)
    -               reduce using rule 62 (expr -> ( expr ) .)
    +               reduce using rule 62 (expr -> ( expr ) .)
    >               reduce using rule 62 (expr -> ( expr ) .)
    GE              reduce using rule 62 (expr -> ( expr ) .)
    <               reduce using rule 62 (expr -> ( expr ) .)
    LE              reduce using rule 62 (expr -> ( expr ) .)
    NE              reduce using rule 62 (expr -> ( expr ) .)
    EQ              reduce using rule 62 (expr -> ( expr ) .)
    AND             reduce using rule 62 (expr -> ( expr ) .)
    OR              reduce using rule 62 (expr -> ( expr ) .)
    ]               reduce using rule 62 (expr -> ( expr ) .)
    )               reduce using rule 62 (expr -> ( expr ) .)
    ,               reduce using rule 62 (expr -> ( expr ) .)


state 102

    (26) param -> type_spec IDENT [ . ]
    ]               shift and go to state 113


state 103

    (17) func_decl -> type_spec IDENT ( params ) compound_stmt .
    CLASS           reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    CHAR            reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    DOUBLE          reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    FLOAT           reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    INT             reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    BOOL            reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    VOID            reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    $end            reduce using rule 17 (func_decl -> type_spec IDENT ( params ) compound_stmt .)


state 104

    (28) compound_stmt -> { . local_decls stmt_list }
    (29) local_decls -> . empty
    (30) local_decls -> . local_decl local_decls
    (86) empty -> .
    (31) local_decl -> . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CONTINUE        reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    {               reduce using rule 86 (empty -> .)
    ;               reduce using rule 86 (empty -> .)
    NEW             reduce using rule 86 (empty -> .)
    CHAR_LIT        reduce using rule 86 (empty -> .)
    STRING_LIT      reduce using rule 86 (empty -> .)
    FLOAT_LIT       reduce using rule 86 (empty -> .)
    INT_LIT         reduce using rule 86 (empty -> .)
    BOOL_LIT        reduce using rule 86 (empty -> .)
    IDENT           reduce using rule 86 (empty -> .)
    (               reduce using rule 86 (empty -> .)
    +               reduce using rule 86 (empty -> .)
    -               reduce using rule 86 (empty -> .)
    !               reduce using rule 86 (empty -> .)
    }               reduce using rule 86 (empty -> .)
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    local_decls                    shift and go to state 114
    empty                          shift and go to state 115
    local_decl                     shift and go to state 116
    var_decl                       shift and go to state 117
    type_spec                      shift and go to state 38

state 105

    (23) _1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .
    ,               reduce using rule 23 (_1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .)
    )               reduce using rule 23 (_1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .)


state 106

    (25) _1_0x2c_param_item -> , param .
    ,               reduce using rule 25 (_1_0x2c_param_item -> , param .)
    )               reduce using rule 25 (_1_0x2c_param_item -> , param .)


state 107

    (7) var_decl -> type_spec IDENT [ expr ] ; .
    IDENT           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CLASS           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CHAR            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    DOUBLE          reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    FLOAT           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    INT             reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BOOL            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    VOID            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    $end            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    }               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CONTINUE        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BREAK           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    RETURN          reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    WHILE           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    IF              reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    {               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    ;               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    NEW             reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CHAR_LIT        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    STRING_LIT      reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    FLOAT_LIT       reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    INT_LIT         reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BOOL_LIT        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    (               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    +               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    -               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    !               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)


state 108

    (59) expr -> IDENT ( args ) .
    ;               reduce using rule 59 (expr -> IDENT ( args ) .)
    %               reduce using rule 59 (expr -> IDENT ( args ) .)
    /               reduce using rule 59 (expr -> IDENT ( args ) .)
    *               reduce using rule 59 (expr -> IDENT ( args ) .)
    -               reduce using rule 59 (expr -> IDENT ( args ) .)
    +               reduce using rule 59 (expr -> IDENT ( args ) .)
    >               reduce using rule 59 (expr -> IDENT ( args ) .)
    GE              reduce using rule 59 (expr -> IDENT ( args ) .)
    <               reduce using rule 59 (expr -> IDENT ( args ) .)
    LE              reduce using rule 59 (expr -> IDENT ( args ) .)
    NE              reduce using rule 59 (expr -> IDENT ( args ) .)
    EQ              reduce using rule 59 (expr -> IDENT ( args ) .)
    AND             reduce using rule 59 (expr -> IDENT ( args ) .)
    OR              reduce using rule 59 (expr -> IDENT ( args ) .)
    ]               reduce using rule 59 (expr -> IDENT ( args ) .)
    )               reduce using rule 59 (expr -> IDENT ( args ) .)
    ,               reduce using rule 59 (expr -> IDENT ( args ) .)


state 109

    (83) arg_list -> expr _2_0x2c_expr_optional .
    )               reduce using rule 83 (arg_list -> expr _2_0x2c_expr_optional .)


state 110

    (84) _2_0x2c_expr_optional -> , . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 118

state 111

    (60) expr -> IDENT [ expr ] .
    (79) expr -> IDENT [ expr ] . = expr
    ;               reduce using rule 60 (expr -> IDENT [ expr ] .)
    %               reduce using rule 60 (expr -> IDENT [ expr ] .)
    /               reduce using rule 60 (expr -> IDENT [ expr ] .)
    *               reduce using rule 60 (expr -> IDENT [ expr ] .)
    -               reduce using rule 60 (expr -> IDENT [ expr ] .)
    +               reduce using rule 60 (expr -> IDENT [ expr ] .)
    >               reduce using rule 60 (expr -> IDENT [ expr ] .)
    GE              reduce using rule 60 (expr -> IDENT [ expr ] .)
    <               reduce using rule 60 (expr -> IDENT [ expr ] .)
    LE              reduce using rule 60 (expr -> IDENT [ expr ] .)
    NE              reduce using rule 60 (expr -> IDENT [ expr ] .)
    EQ              reduce using rule 60 (expr -> IDENT [ expr ] .)
    AND             reduce using rule 60 (expr -> IDENT [ expr ] .)
    OR              reduce using rule 60 (expr -> IDENT [ expr ] .)
    ]               reduce using rule 60 (expr -> IDENT [ expr ] .)
    )               reduce using rule 60 (expr -> IDENT [ expr ] .)
    ,               reduce using rule 60 (expr -> IDENT [ expr ] .)
    =               shift and go to state 119


state 112

    (52) expr -> NEW type_spec [ expr . ]
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ]               shift and go to state 120
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 113

    (26) param -> type_spec IDENT [ ] .
    ,               reduce using rule 26 (param -> type_spec IDENT [ ] .)
    )               reduce using rule 26 (param -> type_spec IDENT [ ] .)


state 114

    (28) compound_stmt -> { local_decls . stmt_list }
    (32) stmt_list -> . empty
    (33) stmt_list -> . stmt stmt_list
    (86) empty -> .
    (34) stmt -> . break_stmt
    (35) stmt -> . return_stmt
    (36) stmt -> . while_stmt
    (37) stmt -> . if_stmt
    (38) stmt -> . compound_stmt
    (39) stmt -> . expr_stmt
    (50) break_stmt -> . CONTINUE ;
    (51) break_stmt -> . BREAK ;
    (48) return_stmt -> . RETURN ;
    (49) return_stmt -> . RETURN expr ;
    (45) while_stmt -> . WHILE ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    (43) expr_stmt -> . ;
    (44) expr_stmt -> . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    }               reduce using rule 86 (empty -> .)
    CONTINUE        shift and go to state 130
    BREAK           shift and go to state 132
    RETURN          shift and go to state 133
    WHILE           shift and go to state 135
    IF              shift and go to state 136
    {               shift and go to state 104
    ;               shift and go to state 131
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    stmt_list                      shift and go to state 121
    empty                          shift and go to state 122
    stmt                           shift and go to state 123
    break_stmt                     shift and go to state 124
    return_stmt                    shift and go to state 125
    while_stmt                     shift and go to state 126
    if_stmt                        shift and go to state 127
    compound_stmt                  shift and go to state 128
    expr_stmt                      shift and go to state 129
    expr                           shift and go to state 134

state 115

    (29) local_decls -> empty .
    CONTINUE        reduce using rule 29 (local_decls -> empty .)
    BREAK           reduce using rule 29 (local_decls -> empty .)
    RETURN          reduce using rule 29 (local_decls -> empty .)
    WHILE           reduce using rule 29 (local_decls -> empty .)
    IF              reduce using rule 29 (local_decls -> empty .)
    {               reduce using rule 29 (local_decls -> empty .)
    ;               reduce using rule 29 (local_decls -> empty .)
    NEW             reduce using rule 29 (local_decls -> empty .)
    CHAR_LIT        reduce using rule 29 (local_decls -> empty .)
    STRING_LIT      reduce using rule 29 (local_decls -> empty .)
    FLOAT_LIT       reduce using rule 29 (local_decls -> empty .)
    INT_LIT         reduce using rule 29 (local_decls -> empty .)
    BOOL_LIT        reduce using rule 29 (local_decls -> empty .)
    IDENT           reduce using rule 29 (local_decls -> empty .)
    (               reduce using rule 29 (local_decls -> empty .)
    +               reduce using rule 29 (local_decls -> empty .)
    -               reduce using rule 29 (local_decls -> empty .)
    !               reduce using rule 29 (local_decls -> empty .)
    }               reduce using rule 29 (local_decls -> empty .)


state 116

    (30) local_decls -> local_decl . local_decls
    (29) local_decls -> . empty
    (30) local_decls -> . local_decl local_decls
    (86) empty -> .
    (31) local_decl -> . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT [ ] ;
    (9) var_decl -> . var_decl IDENT = expr ;
    (10) var_decl -> . type_spec IDENT ;
    (11) type_spec -> . CHAR
    (12) type_spec -> . DOUBLE
    (13) type_spec -> . FLOAT
    (14) type_spec -> . INT
    (15) type_spec -> . BOOL
    (16) type_spec -> . VOID
    CONTINUE        reduce using rule 86 (empty -> .)
    BREAK           reduce using rule 86 (empty -> .)
    RETURN          reduce using rule 86 (empty -> .)
    WHILE           reduce using rule 86 (empty -> .)
    IF              reduce using rule 86 (empty -> .)
    {               reduce using rule 86 (empty -> .)
    ;               reduce using rule 86 (empty -> .)
    NEW             reduce using rule 86 (empty -> .)
    CHAR_LIT        reduce using rule 86 (empty -> .)
    STRING_LIT      reduce using rule 86 (empty -> .)
    FLOAT_LIT       reduce using rule 86 (empty -> .)
    INT_LIT         reduce using rule 86 (empty -> .)
    BOOL_LIT        reduce using rule 86 (empty -> .)
    IDENT           reduce using rule 86 (empty -> .)
    (               reduce using rule 86 (empty -> .)
    +               reduce using rule 86 (empty -> .)
    -               reduce using rule 86 (empty -> .)
    !               reduce using rule 86 (empty -> .)
    }               reduce using rule 86 (empty -> .)
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    local_decl                     shift and go to state 116
    local_decls                    shift and go to state 137
    empty                          shift and go to state 115
    var_decl                       shift and go to state 117
    type_spec                      shift and go to state 38

state 117

    (31) local_decl -> var_decl .
    (9) var_decl -> var_decl . IDENT = expr ;
  ! shift/reduce conflict for IDENT resolved as shift
    CHAR            reduce using rule 31 (local_decl -> var_decl .)
    DOUBLE          reduce using rule 31 (local_decl -> var_decl .)
    FLOAT           reduce using rule 31 (local_decl -> var_decl .)
    INT             reduce using rule 31 (local_decl -> var_decl .)
    BOOL            reduce using rule 31 (local_decl -> var_decl .)
    VOID            reduce using rule 31 (local_decl -> var_decl .)
    CONTINUE        reduce using rule 31 (local_decl -> var_decl .)
    BREAK           reduce using rule 31 (local_decl -> var_decl .)
    RETURN          reduce using rule 31 (local_decl -> var_decl .)
    WHILE           reduce using rule 31 (local_decl -> var_decl .)
    IF              reduce using rule 31 (local_decl -> var_decl .)
    {               reduce using rule 31 (local_decl -> var_decl .)
    ;               reduce using rule 31 (local_decl -> var_decl .)
    NEW             reduce using rule 31 (local_decl -> var_decl .)
    CHAR_LIT        reduce using rule 31 (local_decl -> var_decl .)
    STRING_LIT      reduce using rule 31 (local_decl -> var_decl .)
    FLOAT_LIT       reduce using rule 31 (local_decl -> var_decl .)
    INT_LIT         reduce using rule 31 (local_decl -> var_decl .)
    BOOL_LIT        reduce using rule 31 (local_decl -> var_decl .)
    (               reduce using rule 31 (local_decl -> var_decl .)
    +               reduce using rule 31 (local_decl -> var_decl .)
    -               reduce using rule 31 (local_decl -> var_decl .)
    !               reduce using rule 31 (local_decl -> var_decl .)
    }               reduce using rule 31 (local_decl -> var_decl .)
    IDENT           shift and go to state 16


state 118

    (84) _2_0x2c_expr_optional -> , expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    )               reduce using rule 84 (_2_0x2c_expr_optional -> , expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 119

    (79) expr -> IDENT [ expr ] = . expr
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 138

state 120

    (52) expr -> NEW type_spec [ expr ] .
    ;               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    %               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    /               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    *               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    -               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    +               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    >               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    GE              reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    <               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    LE              reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    NE              reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    EQ              reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    AND             reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    OR              reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    ]               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    )               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)
    ,               reduce using rule 52 (expr -> NEW type_spec [ expr ] .)


state 121

    (28) compound_stmt -> { local_decls stmt_list . }
    }               shift and go to state 139


state 122

    (32) stmt_list -> empty .
    }               reduce using rule 32 (stmt_list -> empty .)


state 123

    (33) stmt_list -> stmt . stmt_list
    (32) stmt_list -> . empty
    (33) stmt_list -> . stmt stmt_list
    (86) empty -> .
    (34) stmt -> . break_stmt
    (35) stmt -> . return_stmt
    (36) stmt -> . while_stmt
    (37) stmt -> . if_stmt
    (38) stmt -> . compound_stmt
    (39) stmt -> . expr_stmt
    (50) break_stmt -> . CONTINUE ;
    (51) break_stmt -> . BREAK ;
    (48) return_stmt -> . RETURN ;
    (49) return_stmt -> . RETURN expr ;
    (45) while_stmt -> . WHILE ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    (43) expr_stmt -> . ;
    (44) expr_stmt -> . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    }               reduce using rule 86 (empty -> .)
    CONTINUE        shift and go to state 130
    BREAK           shift and go to state 132
    RETURN          shift and go to state 133
    WHILE           shift and go to state 135
    IF              shift and go to state 136
    {               shift and go to state 104
    ;               shift and go to state 131
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    stmt                           shift and go to state 123
    stmt_list                      shift and go to state 140
    empty                          shift and go to state 122
    break_stmt                     shift and go to state 124
    return_stmt                    shift and go to state 125
    while_stmt                     shift and go to state 126
    if_stmt                        shift and go to state 127
    compound_stmt                  shift and go to state 128
    expr_stmt                      shift and go to state 129
    expr                           shift and go to state 134

state 124

    (34) stmt -> break_stmt .
    CONTINUE        reduce using rule 34 (stmt -> break_stmt .)
    BREAK           reduce using rule 34 (stmt -> break_stmt .)
    RETURN          reduce using rule 34 (stmt -> break_stmt .)
    WHILE           reduce using rule 34 (stmt -> break_stmt .)
    IF              reduce using rule 34 (stmt -> break_stmt .)
    {               reduce using rule 34 (stmt -> break_stmt .)
    ;               reduce using rule 34 (stmt -> break_stmt .)
    NEW             reduce using rule 34 (stmt -> break_stmt .)
    CHAR_LIT        reduce using rule 34 (stmt -> break_stmt .)
    STRING_LIT      reduce using rule 34 (stmt -> break_stmt .)
    FLOAT_LIT       reduce using rule 34 (stmt -> break_stmt .)
    INT_LIT         reduce using rule 34 (stmt -> break_stmt .)
    BOOL_LIT        reduce using rule 34 (stmt -> break_stmt .)
    IDENT           reduce using rule 34 (stmt -> break_stmt .)
    (               reduce using rule 34 (stmt -> break_stmt .)
    +               reduce using rule 34 (stmt -> break_stmt .)
    -               reduce using rule 34 (stmt -> break_stmt .)
    !               reduce using rule 34 (stmt -> break_stmt .)
    }               reduce using rule 34 (stmt -> break_stmt .)
    ELSE            reduce using rule 34 (stmt -> break_stmt .)


state 125

    (35) stmt -> return_stmt .
    CONTINUE        reduce using rule 35 (stmt -> return_stmt .)
    BREAK           reduce using rule 35 (stmt -> return_stmt .)
    RETURN          reduce using rule 35 (stmt -> return_stmt .)
    WHILE           reduce using rule 35 (stmt -> return_stmt .)
    IF              reduce using rule 35 (stmt -> return_stmt .)
    {               reduce using rule 35 (stmt -> return_stmt .)
    ;               reduce using rule 35 (stmt -> return_stmt .)
    NEW             reduce using rule 35 (stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 35 (stmt -> return_stmt .)
    STRING_LIT      reduce using rule 35 (stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 35 (stmt -> return_stmt .)
    INT_LIT         reduce using rule 35 (stmt -> return_stmt .)
    BOOL_LIT        reduce using rule 35 (stmt -> return_stmt .)
    IDENT           reduce using rule 35 (stmt -> return_stmt .)
    (               reduce using rule 35 (stmt -> return_stmt .)
    +               reduce using rule 35 (stmt -> return_stmt .)
    -               reduce using rule 35 (stmt -> return_stmt .)
    !               reduce using rule 35 (stmt -> return_stmt .)
    }               reduce using rule 35 (stmt -> return_stmt .)
    ELSE            reduce using rule 35 (stmt -> return_stmt .)


state 126

    (36) stmt -> while_stmt .
    CONTINUE        reduce using rule 36 (stmt -> while_stmt .)
    BREAK           reduce using rule 36 (stmt -> while_stmt .)
    RETURN          reduce using rule 36 (stmt -> while_stmt .)
    WHILE           reduce using rule 36 (stmt -> while_stmt .)
    IF              reduce using rule 36 (stmt -> while_stmt .)
    {               reduce using rule 36 (stmt -> while_stmt .)
    ;               reduce using rule 36 (stmt -> while_stmt .)
    NEW             reduce using rule 36 (stmt -> while_stmt .)
    CHAR_LIT        reduce using rule 36 (stmt -> while_stmt .)
    STRING_LIT      reduce using rule 36 (stmt -> while_stmt .)
    FLOAT_LIT       reduce using rule 36 (stmt -> while_stmt .)
    INT_LIT         reduce using rule 36 (stmt -> while_stmt .)
    BOOL_LIT        reduce using rule 36 (stmt -> while_stmt .)
    IDENT           reduce using rule 36 (stmt -> while_stmt .)
    (               reduce using rule 36 (stmt -> while_stmt .)
    +               reduce using rule 36 (stmt -> while_stmt .)
    -               reduce using rule 36 (stmt -> while_stmt .)
    !               reduce using rule 36 (stmt -> while_stmt .)
    }               reduce using rule 36 (stmt -> while_stmt .)
    ELSE            reduce using rule 36 (stmt -> while_stmt .)


state 127

    (37) stmt -> if_stmt .
    CONTINUE        reduce using rule 37 (stmt -> if_stmt .)
    BREAK           reduce using rule 37 (stmt -> if_stmt .)
    RETURN          reduce using rule 37 (stmt -> if_stmt .)
    WHILE           reduce using rule 37 (stmt -> if_stmt .)
    IF              reduce using rule 37 (stmt -> if_stmt .)
    {               reduce using rule 37 (stmt -> if_stmt .)
    ;               reduce using rule 37 (stmt -> if_stmt .)
    NEW             reduce using rule 37 (stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 37 (stmt -> if_stmt .)
    STRING_LIT      reduce using rule 37 (stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 37 (stmt -> if_stmt .)
    INT_LIT         reduce using rule 37 (stmt -> if_stmt .)
    BOOL_LIT        reduce using rule 37 (stmt -> if_stmt .)
    IDENT           reduce using rule 37 (stmt -> if_stmt .)
    (               reduce using rule 37 (stmt -> if_stmt .)
    +               reduce using rule 37 (stmt -> if_stmt .)
    -               reduce using rule 37 (stmt -> if_stmt .)
    !               reduce using rule 37 (stmt -> if_stmt .)
    }               reduce using rule 37 (stmt -> if_stmt .)
    ELSE            reduce using rule 37 (stmt -> if_stmt .)


state 128

    (38) stmt -> compound_stmt .
    CONTINUE        reduce using rule 38 (stmt -> compound_stmt .)
    BREAK           reduce using rule 38 (stmt -> compound_stmt .)
    RETURN          reduce using rule 38 (stmt -> compound_stmt .)
    WHILE           reduce using rule 38 (stmt -> compound_stmt .)
    IF              reduce using rule 38 (stmt -> compound_stmt .)
    {               reduce using rule 38 (stmt -> compound_stmt .)
    ;               reduce using rule 38 (stmt -> compound_stmt .)
    NEW             reduce using rule 38 (stmt -> compound_stmt .)
    CHAR_LIT        reduce using rule 38 (stmt -> compound_stmt .)
    STRING_LIT      reduce using rule 38 (stmt -> compound_stmt .)
    FLOAT_LIT       reduce using rule 38 (stmt -> compound_stmt .)
    INT_LIT         reduce using rule 38 (stmt -> compound_stmt .)
    BOOL_LIT        reduce using rule 38 (stmt -> compound_stmt .)
    IDENT           reduce using rule 38 (stmt -> compound_stmt .)
    (               reduce using rule 38 (stmt -> compound_stmt .)
    +               reduce using rule 38 (stmt -> compound_stmt .)
    -               reduce using rule 38 (stmt -> compound_stmt .)
    !               reduce using rule 38 (stmt -> compound_stmt .)
    }               reduce using rule 38 (stmt -> compound_stmt .)
    ELSE            reduce using rule 38 (stmt -> compound_stmt .)


state 129

    (39) stmt -> expr_stmt .
    CONTINUE        reduce using rule 39 (stmt -> expr_stmt .)
    BREAK           reduce using rule 39 (stmt -> expr_stmt .)
    RETURN          reduce using rule 39 (stmt -> expr_stmt .)
    WHILE           reduce using rule 39 (stmt -> expr_stmt .)
    IF              reduce using rule 39 (stmt -> expr_stmt .)
    {               reduce using rule 39 (stmt -> expr_stmt .)
    ;               reduce using rule 39 (stmt -> expr_stmt .)
    NEW             reduce using rule 39 (stmt -> expr_stmt .)
    CHAR_LIT        reduce using rule 39 (stmt -> expr_stmt .)
    STRING_LIT      reduce using rule 39 (stmt -> expr_stmt .)
    FLOAT_LIT       reduce using rule 39 (stmt -> expr_stmt .)
    INT_LIT         reduce using rule 39 (stmt -> expr_stmt .)
    BOOL_LIT        reduce using rule 39 (stmt -> expr_stmt .)
    IDENT           reduce using rule 39 (stmt -> expr_stmt .)
    (               reduce using rule 39 (stmt -> expr_stmt .)
    +               reduce using rule 39 (stmt -> expr_stmt .)
    -               reduce using rule 39 (stmt -> expr_stmt .)
    !               reduce using rule 39 (stmt -> expr_stmt .)
    }               reduce using rule 39 (stmt -> expr_stmt .)
    ELSE            reduce using rule 39 (stmt -> expr_stmt .)


state 130

    (50) break_stmt -> CONTINUE . ;
    ;               shift and go to state 141


state 131

    (43) expr_stmt -> ; .
    CONTINUE        reduce using rule 43 (expr_stmt -> ; .)
    BREAK           reduce using rule 43 (expr_stmt -> ; .)
    RETURN          reduce using rule 43 (expr_stmt -> ; .)
    WHILE           reduce using rule 43 (expr_stmt -> ; .)
    IF              reduce using rule 43 (expr_stmt -> ; .)
    {               reduce using rule 43 (expr_stmt -> ; .)
    ;               reduce using rule 43 (expr_stmt -> ; .)
    NEW             reduce using rule 43 (expr_stmt -> ; .)
    CHAR_LIT        reduce using rule 43 (expr_stmt -> ; .)
    STRING_LIT      reduce using rule 43 (expr_stmt -> ; .)
    FLOAT_LIT       reduce using rule 43 (expr_stmt -> ; .)
    INT_LIT         reduce using rule 43 (expr_stmt -> ; .)
    BOOL_LIT        reduce using rule 43 (expr_stmt -> ; .)
    IDENT           reduce using rule 43 (expr_stmt -> ; .)
    (               reduce using rule 43 (expr_stmt -> ; .)
    +               reduce using rule 43 (expr_stmt -> ; .)
    -               reduce using rule 43 (expr_stmt -> ; .)
    !               reduce using rule 43 (expr_stmt -> ; .)
    }               reduce using rule 43 (expr_stmt -> ; .)
    ELSE            reduce using rule 43 (expr_stmt -> ; .)


state 132

    (51) break_stmt -> BREAK . ;
    ;               shift and go to state 142


state 133

    (48) return_stmt -> RETURN . ;
    (49) return_stmt -> RETURN . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    ;               shift and go to state 143
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 144

state 134

    (44) expr_stmt -> expr . ;
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               shift and go to state 145
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 135

    (45) while_stmt -> WHILE . ( expr ) stmt
    (               shift and go to state 146


state 136

    (46) if_stmt -> IF . ( expr ) stmt ELSE stmt
    (47) if_stmt -> IF . ( expr ) stmt
    (               shift and go to state 147


state 137

    (30) local_decls -> local_decl local_decls .
    CONTINUE        reduce using rule 30 (local_decls -> local_decl local_decls .)
    BREAK           reduce using rule 30 (local_decls -> local_decl local_decls .)
    RETURN          reduce using rule 30 (local_decls -> local_decl local_decls .)
    WHILE           reduce using rule 30 (local_decls -> local_decl local_decls .)
    IF              reduce using rule 30 (local_decls -> local_decl local_decls .)
    {               reduce using rule 30 (local_decls -> local_decl local_decls .)
    ;               reduce using rule 30 (local_decls -> local_decl local_decls .)
    NEW             reduce using rule 30 (local_decls -> local_decl local_decls .)
    CHAR_LIT        reduce using rule 30 (local_decls -> local_decl local_decls .)
    STRING_LIT      reduce using rule 30 (local_decls -> local_decl local_decls .)
    FLOAT_LIT       reduce using rule 30 (local_decls -> local_decl local_decls .)
    INT_LIT         reduce using rule 30 (local_decls -> local_decl local_decls .)
    BOOL_LIT        reduce using rule 30 (local_decls -> local_decl local_decls .)
    IDENT           reduce using rule 30 (local_decls -> local_decl local_decls .)
    (               reduce using rule 30 (local_decls -> local_decl local_decls .)
    +               reduce using rule 30 (local_decls -> local_decl local_decls .)
    -               reduce using rule 30 (local_decls -> local_decl local_decls .)
    !               reduce using rule 30 (local_decls -> local_decl local_decls .)
    }               reduce using rule 30 (local_decls -> local_decl local_decls .)


state 138

    (79) expr -> IDENT [ expr ] = expr .
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               reduce using rule 79 (expr -> IDENT [ expr ] = expr .)
    ]               reduce using rule 79 (expr -> IDENT [ expr ] = expr .)
    )               reduce using rule 79 (expr -> IDENT [ expr ] = expr .)
    ,               reduce using rule 79 (expr -> IDENT [ expr ] = expr .)
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 139

    (28) compound_stmt -> { local_decls stmt_list } .
    CLASS           reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    CHAR            reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    DOUBLE          reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT           reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    INT             reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    BOOL            reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    VOID            reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    $end            reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    CONTINUE        reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    BREAK           reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    RETURN          reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    WHILE           reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    IF              reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    {               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    ;               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    NEW             reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    CHAR_LIT        reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    STRING_LIT      reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT_LIT       reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    INT_LIT         reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    BOOL_LIT        reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    IDENT           reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    (               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    +               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    -               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    !               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    }               reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)
    ELSE            reduce using rule 28 (compound_stmt -> { local_decls stmt_list } .)


state 140

    (33) stmt_list -> stmt stmt_list .
    }               reduce using rule 33 (stmt_list -> stmt stmt_list .)


state 141

    (50) break_stmt -> CONTINUE ; .
    CONTINUE        reduce using rule 50 (break_stmt -> CONTINUE ; .)
    BREAK           reduce using rule 50 (break_stmt -> CONTINUE ; .)
    RETURN          reduce using rule 50 (break_stmt -> CONTINUE ; .)
    WHILE           reduce using rule 50 (break_stmt -> CONTINUE ; .)
    IF              reduce using rule 50 (break_stmt -> CONTINUE ; .)
    {               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    ;               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    NEW             reduce using rule 50 (break_stmt -> CONTINUE ; .)
    CHAR_LIT        reduce using rule 50 (break_stmt -> CONTINUE ; .)
    STRING_LIT      reduce using rule 50 (break_stmt -> CONTINUE ; .)
    FLOAT_LIT       reduce using rule 50 (break_stmt -> CONTINUE ; .)
    INT_LIT         reduce using rule 50 (break_stmt -> CONTINUE ; .)
    BOOL_LIT        reduce using rule 50 (break_stmt -> CONTINUE ; .)
    IDENT           reduce using rule 50 (break_stmt -> CONTINUE ; .)
    (               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    +               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    -               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    !               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    }               reduce using rule 50 (break_stmt -> CONTINUE ; .)
    ELSE            reduce using rule 50 (break_stmt -> CONTINUE ; .)


state 142

    (51) break_stmt -> BREAK ; .
    CONTINUE        reduce using rule 51 (break_stmt -> BREAK ; .)
    BREAK           reduce using rule 51 (break_stmt -> BREAK ; .)
    RETURN          reduce using rule 51 (break_stmt -> BREAK ; .)
    WHILE           reduce using rule 51 (break_stmt -> BREAK ; .)
    IF              reduce using rule 51 (break_stmt -> BREAK ; .)
    {               reduce using rule 51 (break_stmt -> BREAK ; .)
    ;               reduce using rule 51 (break_stmt -> BREAK ; .)
    NEW             reduce using rule 51 (break_stmt -> BREAK ; .)
    CHAR_LIT        reduce using rule 51 (break_stmt -> BREAK ; .)
    STRING_LIT      reduce using rule 51 (break_stmt -> BREAK ; .)
    FLOAT_LIT       reduce using rule 51 (break_stmt -> BREAK ; .)
    INT_LIT         reduce using rule 51 (break_stmt -> BREAK ; .)
    BOOL_LIT        reduce using rule 51 (break_stmt -> BREAK ; .)
    IDENT           reduce using rule 51 (break_stmt -> BREAK ; .)
    (               reduce using rule 51 (break_stmt -> BREAK ; .)
    +               reduce using rule 51 (break_stmt -> BREAK ; .)
    -               reduce using rule 51 (break_stmt -> BREAK ; .)
    !               reduce using rule 51 (break_stmt -> BREAK ; .)
    }               reduce using rule 51 (break_stmt -> BREAK ; .)
    ELSE            reduce using rule 51 (break_stmt -> BREAK ; .)


state 143

    (48) return_stmt -> RETURN ; .
    CONTINUE        reduce using rule 48 (return_stmt -> RETURN ; .)
    BREAK           reduce using rule 48 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 48 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 48 (return_stmt -> RETURN ; .)
    IF              reduce using rule 48 (return_stmt -> RETURN ; .)
    {               reduce using rule 48 (return_stmt -> RETURN ; .)
    ;               reduce using rule 48 (return_stmt -> RETURN ; .)
    NEW             reduce using rule 48 (return_stmt -> RETURN ; .)
    CHAR_LIT        reduce using rule 48 (return_stmt -> RETURN ; .)
    STRING_LIT      reduce using rule 48 (return_stmt -> RETURN ; .)
    FLOAT_LIT       reduce using rule 48 (return_stmt -> RETURN ; .)
    INT_LIT         reduce using rule 48 (return_stmt -> RETURN ; .)
    BOOL_LIT        reduce using rule 48 (return_stmt -> RETURN ; .)
    IDENT           reduce using rule 48 (return_stmt -> RETURN ; .)
    (               reduce using rule 48 (return_stmt -> RETURN ; .)
    +               reduce using rule 48 (return_stmt -> RETURN ; .)
    -               reduce using rule 48 (return_stmt -> RETURN ; .)
    !               reduce using rule 48 (return_stmt -> RETURN ; .)
    }               reduce using rule 48 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 48 (return_stmt -> RETURN ; .)


state 144

    (49) return_stmt -> RETURN expr . ;
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    ;               shift and go to state 148
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 145

    (44) expr_stmt -> expr ; .
    CONTINUE        reduce using rule 44 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 44 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 44 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 44 (expr_stmt -> expr ; .)
    IF              reduce using rule 44 (expr_stmt -> expr ; .)
    {               reduce using rule 44 (expr_stmt -> expr ; .)
    ;               reduce using rule 44 (expr_stmt -> expr ; .)
    NEW             reduce using rule 44 (expr_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 44 (expr_stmt -> expr ; .)
    STRING_LIT      reduce using rule 44 (expr_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 44 (expr_stmt -> expr ; .)
    INT_LIT         reduce using rule 44 (expr_stmt -> expr ; .)
    BOOL_LIT        reduce using rule 44 (expr_stmt -> expr ; .)
    IDENT           reduce using rule 44 (expr_stmt -> expr ; .)
    (               reduce using rule 44 (expr_stmt -> expr ; .)
    +               reduce using rule 44 (expr_stmt -> expr ; .)
    -               reduce using rule 44 (expr_stmt -> expr ; .)
    !               reduce using rule 44 (expr_stmt -> expr ; .)
    }               reduce using rule 44 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 44 (expr_stmt -> expr ; .)


state 146

    (45) while_stmt -> WHILE ( . expr ) stmt
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 149

state 147

    (46) if_stmt -> IF ( . expr ) stmt ELSE stmt
    (47) if_stmt -> IF ( . expr ) stmt
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 150

state 148

    (49) return_stmt -> RETURN expr ; .
    CONTINUE        reduce using rule 49 (return_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 49 (return_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 49 (return_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 49 (return_stmt -> RETURN expr ; .)
    IF              reduce using rule 49 (return_stmt -> RETURN expr ; .)
    {               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    ;               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    NEW             reduce using rule 49 (return_stmt -> RETURN expr ; .)
    CHAR_LIT        reduce using rule 49 (return_stmt -> RETURN expr ; .)
    STRING_LIT      reduce using rule 49 (return_stmt -> RETURN expr ; .)
    FLOAT_LIT       reduce using rule 49 (return_stmt -> RETURN expr ; .)
    INT_LIT         reduce using rule 49 (return_stmt -> RETURN expr ; .)
    BOOL_LIT        reduce using rule 49 (return_stmt -> RETURN expr ; .)
    IDENT           reduce using rule 49 (return_stmt -> RETURN expr ; .)
    (               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    +               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    -               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    !               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    }               reduce using rule 49 (return_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 49 (return_stmt -> RETURN expr ; .)


state 149

    (45) while_stmt -> WHILE ( expr . ) stmt
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    )               shift and go to state 151
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 150

    (46) if_stmt -> IF ( expr . ) stmt ELSE stmt
    (47) if_stmt -> IF ( expr . ) stmt
    (66) expr -> expr . % expr
    (67) expr -> expr . / expr
    (68) expr -> expr . * expr
    (69) expr -> expr . - expr
    (70) expr -> expr . + expr
    (71) expr -> expr . > expr
    (72) expr -> expr . GE expr
    (73) expr -> expr . < expr
    (74) expr -> expr . LE expr
    (75) expr -> expr . NE expr
    (76) expr -> expr . EQ expr
    (77) expr -> expr . AND expr
    (78) expr -> expr . OR expr
    )               shift and go to state 152
    %               shift and go to state 51
    /               shift and go to state 52
    *               shift and go to state 53
    -               shift and go to state 54
    +               shift and go to state 55
    >               shift and go to state 56
    GE              shift and go to state 57
    <               shift and go to state 58
    LE              shift and go to state 59
    NE              shift and go to state 60
    EQ              shift and go to state 61
    AND             shift and go to state 62
    OR              shift and go to state 63


state 151

    (45) while_stmt -> WHILE ( expr ) . stmt
    (34) stmt -> . break_stmt
    (35) stmt -> . return_stmt
    (36) stmt -> . while_stmt
    (37) stmt -> . if_stmt
    (38) stmt -> . compound_stmt
    (39) stmt -> . expr_stmt
    (50) break_stmt -> . CONTINUE ;
    (51) break_stmt -> . BREAK ;
    (48) return_stmt -> . RETURN ;
    (49) return_stmt -> . RETURN expr ;
    (45) while_stmt -> . WHILE ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    (43) expr_stmt -> . ;
    (44) expr_stmt -> . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    CONTINUE        shift and go to state 130
    BREAK           shift and go to state 132
    RETURN          shift and go to state 133
    WHILE           shift and go to state 135
    IF              shift and go to state 136
    {               shift and go to state 104
    ;               shift and go to state 131
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 134
    stmt                           shift and go to state 153
    break_stmt                     shift and go to state 124
    return_stmt                    shift and go to state 125
    while_stmt                     shift and go to state 126
    if_stmt                        shift and go to state 127
    compound_stmt                  shift and go to state 128
    expr_stmt                      shift and go to state 129

state 152

    (46) if_stmt -> IF ( expr ) . stmt ELSE stmt
    (47) if_stmt -> IF ( expr ) . stmt
    (34) stmt -> . break_stmt
    (35) stmt -> . return_stmt
    (36) stmt -> . while_stmt
    (37) stmt -> . if_stmt
    (38) stmt -> . compound_stmt
    (39) stmt -> . expr_stmt
    (50) break_stmt -> . CONTINUE ;
    (51) break_stmt -> . BREAK ;
    (48) return_stmt -> . RETURN ;
    (49) return_stmt -> . RETURN expr ;
    (45) while_stmt -> . WHILE ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    (43) expr_stmt -> . ;
    (44) expr_stmt -> . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    CONTINUE        shift and go to state 130
    BREAK           shift and go to state 132
    RETURN          shift and go to state 133
    WHILE           shift and go to state 135
    IF              shift and go to state 136
    {               shift and go to state 104
    ;               shift and go to state 131
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 134
    stmt                           shift and go to state 154
    break_stmt                     shift and go to state 124
    return_stmt                    shift and go to state 125
    while_stmt                     shift and go to state 126
    if_stmt                        shift and go to state 127
    compound_stmt                  shift and go to state 128
    expr_stmt                      shift and go to state 129

state 153

    (45) while_stmt -> WHILE ( expr ) stmt .
    CONTINUE        reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    NEW             reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    CHAR_LIT        reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    STRING_LIT      reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    INT_LIT         reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    BOOL_LIT        reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    IDENT           reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    +               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    -               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    }               reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 45 (while_stmt -> WHILE ( expr ) stmt .)


state 154

    (46) if_stmt -> IF ( expr ) stmt . ELSE stmt
    (47) if_stmt -> IF ( expr ) stmt .
  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 155
    CONTINUE        reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    NEW             reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    CHAR_LIT        reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    STRING_LIT      reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    INT_LIT         reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    BOOL_LIT        reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    IDENT           reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    +               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    -               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)
    }               reduce using rule 47 (if_stmt -> IF ( expr ) stmt .)


state 155

    (46) if_stmt -> IF ( expr ) stmt ELSE . stmt
    (34) stmt -> . break_stmt
    (35) stmt -> . return_stmt
    (36) stmt -> . while_stmt
    (37) stmt -> . if_stmt
    (38) stmt -> . compound_stmt
    (39) stmt -> . expr_stmt
    (50) break_stmt -> . CONTINUE ;
    (51) break_stmt -> . BREAK ;
    (48) return_stmt -> . RETURN ;
    (49) return_stmt -> . RETURN expr ;
    (45) while_stmt -> . WHILE ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (47) if_stmt -> . IF ( expr ) stmt
    (28) compound_stmt -> . { local_decls stmt_list }
    (43) expr_stmt -> . ;
    (44) expr_stmt -> . expr ;
    (52) expr -> . NEW type_spec [ expr ]
    (53) expr -> . CHAR_LIT
    (54) expr -> . STRING_LIT
    (55) expr -> . FLOAT_LIT
    (56) expr -> . INT_LIT
    (57) expr -> . BOOL_LIT
    (58) expr -> . IDENT . SIZE
    (59) expr -> . IDENT ( args )
    (60) expr -> . IDENT [ expr ]
    (61) expr -> . IDENT
    (62) expr -> . ( expr )
    (63) expr -> . + expr
    (64) expr -> . - expr
    (65) expr -> . ! expr
    (66) expr -> . expr % expr
    (67) expr -> . expr / expr
    (68) expr -> . expr * expr
    (69) expr -> . expr - expr
    (70) expr -> . expr + expr
    (71) expr -> . expr > expr
    (72) expr -> . expr GE expr
    (73) expr -> . expr < expr
    (74) expr -> . expr LE expr
    (75) expr -> . expr NE expr
    (76) expr -> . expr EQ expr
    (77) expr -> . expr AND expr
    (78) expr -> . expr OR expr
    (79) expr -> . IDENT [ expr ] = expr
    (80) expr -> . IDENT = expr
    CONTINUE        shift and go to state 130
    BREAK           shift and go to state 132
    RETURN          shift and go to state 133
    WHILE           shift and go to state 135
    IF              shift and go to state 136
    {               shift and go to state 104
    ;               shift and go to state 131
    NEW             shift and go to state 26
    CHAR_LIT        shift and go to state 27
    STRING_LIT      shift and go to state 28
    FLOAT_LIT       shift and go to state 29
    INT_LIT         shift and go to state 30
    BOOL_LIT        shift and go to state 31
    IDENT           shift and go to state 24
    (               shift and go to state 32
    +               shift and go to state 33
    -               shift and go to state 34
    !               shift and go to state 35

    expr                           shift and go to state 134
    stmt                           shift and go to state 156
    break_stmt                     shift and go to state 124
    return_stmt                    shift and go to state 125
    while_stmt                     shift and go to state 126
    if_stmt                        shift and go to state 127
    compound_stmt                  shift and go to state 128
    expr_stmt                      shift and go to state 129

state 156

    (46) if_stmt -> IF ( expr ) stmt ELSE stmt .
    CONTINUE        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    NEW             reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    CHAR_LIT        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRING_LIT      reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOAT_LIT       reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INT_LIT         reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOL_LIT        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IDENT           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    +               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    -               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    }               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)


Conflicts:

shift/reduce conflict for IDENT in state 117 resolved as shift
shift/reduce conflict for ELSE in state 154 resolved as shift