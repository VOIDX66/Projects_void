Grammar:

Rule 0     S' -> program
Rule 1     program -> decl_list
Rule 2     decl_list -> decl
Rule 3     decl_list -> decl_list decl
Rule 4     decl -> class_decl
Rule 5     decl -> func_decl
Rule 6     decl -> var_decl
Rule 7     var_decl -> type_spec IDENT [ expr ] ;
Rule 8     var_decl -> type_spec IDENT = expr ;
Rule 9     var_decl -> type_spec IDENT ;
Rule 10    type_spec -> CHAR
Rule 11    type_spec -> DOUBLE
Rule 12    type_spec -> FLOAT
Rule 13    type_spec -> INT
Rule 14    type_spec -> BOOL
Rule 15    type_spec -> VOID
Rule 16    func_decl -> type_spec IDENT ( params ) compound_stmt
Rule 17    params -> VOID
Rule 18    params -> param_list
Rule 19    param_list -> param _1_0x2c_param_repeat
Rule 20    _1_0x2c_param_repeat -> _1_0x2c_param_items
Rule 21    _1_0x2c_param_repeat -> <empty>
Rule 22    _1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item
Rule 23    _1_0x2c_param_items -> _1_0x2c_param_item
Rule 24    _1_0x2c_param_item -> , param
Rule 25    param -> type_spec IDENT [ ]
Rule 26    param -> type_spec IDENT
Rule 27    compound_stmt -> { local_decls stmt_list }
Rule 28    local_decls -> empty
Rule 29    local_decls -> local_decl local_decls
Rule 30    local_decl -> var_decl
Rule 31    stmt_list -> empty
Rule 32    stmt_list -> stmt stmt_list
Rule 33    stmt -> break_stmt
Rule 34    stmt -> return_stmt
Rule 35    stmt -> while_stmt
Rule 36    stmt -> if_stmt
Rule 37    stmt -> compound_stmt
Rule 38    stmt -> expr_stmt
Rule 39    class_decl -> CLASS IDENT { var_decl_list }
Rule 40    var_decl_list -> var_decl
Rule 41    var_decl_list -> var_decl_list var_decl
Rule 42    expr_stmt -> ;
Rule 43    expr_stmt -> expr ;
Rule 44    while_stmt -> WHILE ( expr ) stmt
Rule 45    if_stmt -> IF ( expr ) stmt  [precedence=nonassoc, level=1]
Rule 46    if_stmt -> IF ( expr ) stmt ELSE stmt  [precedence=nonassoc, level=2]
Rule 47    return_stmt -> RETURN ;
Rule 48    return_stmt -> RETURN expr ;
Rule 49    break_stmt -> CONTINUE ;
Rule 50    break_stmt -> BREAK ;
Rule 51    expr -> NEW type_spec [ expr ]
Rule 52    expr -> CHAR_LIT
Rule 53    expr -> STRING_LIT
Rule 54    expr -> FLOAT_LIT
Rule 55    expr -> INT_LIT
Rule 56    expr -> BOOL_LIT
Rule 57    expr -> IDENT . SIZE
Rule 58    expr -> IDENT ( args )
Rule 59    expr -> IDENT [ expr ]
Rule 60    expr -> IDENT
Rule 61    expr -> ( expr )
Rule 62    expr -> + expr  [precedence=right, level=10]
Rule 63    expr -> - expr  [precedence=right, level=10]
Rule 64    expr -> ! expr  [precedence=right, level=10]
Rule 65    expr -> expr % expr  [precedence=left, level=9]
Rule 66    expr -> expr / expr  [precedence=left, level=9]
Rule 67    expr -> expr * expr  [precedence=left, level=9]
Rule 68    expr -> expr - expr  [precedence=left, level=8]
Rule 69    expr -> expr + expr  [precedence=left, level=8]
Rule 70    expr -> expr > expr  [precedence=left, level=7]
Rule 71    expr -> expr GE expr  [precedence=left, level=7]
Rule 72    expr -> expr < expr  [precedence=left, level=7]
Rule 73    expr -> expr LE expr  [precedence=left, level=7]
Rule 74    expr -> expr NE expr  [precedence=left, level=6]
Rule 75    expr -> expr EQ expr  [precedence=left, level=6]
Rule 76    expr -> expr AND expr  [precedence=left, level=5]
Rule 77    expr -> expr OR expr  [precedence=left, level=4]
Rule 78    expr -> IDENT [ expr ] = expr  [precedence=right, level=3]
Rule 79    expr -> IDENT = expr  [precedence=right, level=3]
Rule 80    args -> empty
Rule 81    args -> arg_list
Rule 82    arg_list -> expr _2_0x2c_expr_optional
Rule 83    _2_0x2c_expr_optional -> , expr
Rule 84    _2_0x2c_expr_optional -> <empty>
Rule 85    empty -> <empty>

Terminals, with rules where they appear:

!                    : 64
%                    : 65
(                    : 16 44 45 46 58 61
)                    : 16 44 45 46 58 61
*                    : 67
+                    : 62 69
,                    : 24 83
-                    : 63 68
.                    : 57
/                    : 66
;                    : 7 8 9 42 43 47 48 49 50
<                    : 72
=                    : 8 78 79
>                    : 70
AND                  : 76
BOOL                 : 14
BOOL_LIT             : 56
BREAK                : 50
CHAR                 : 10
CHAR_LIT             : 52
CLASS                : 39
CONTINUE             : 49
DOUBLE               : 11
ELSE                 : 46
EQ                   : 75
FLOAT                : 12
FLOAT_LIT            : 54
GE                   : 71
IDENT                : 7 8 9 16 25 26 39 57 58 59 60 78 79
IF                   : 45 46
INT                  : 13
INT_LIT              : 55
LE                   : 73
NE                   : 74
NEW                  : 51
OR                   : 77
RETURN               : 47 48
SIZE                 : 57
STRING_LIT           : 53
VOID                 : 15 17
WHILE                : 44
[                    : 7 25 51 59 78
]                    : 7 25 51 59 78
error                : 
{                    : 27 39
}                    : 27 39

Nonterminals, with rules where they appear:

_1_0x2c_param_item   : 22 23
_1_0x2c_param_items  : 20 22
_1_0x2c_param_repeat : 19
_2_0x2c_expr_optional : 82
arg_list             : 81
args                 : 58
break_stmt           : 33
class_decl           : 4
compound_stmt        : 16 37
decl                 : 2 3
decl_list            : 1 3
empty                : 28 31 80
expr                 : 7 8 43 44 45 46 48 51 59 61 62 63 64 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 75 75 76 76 77 77 78 78 79 82 83
expr_stmt            : 38
func_decl            : 5
if_stmt              : 36
local_decl           : 29
local_decls          : 27 29
param                : 19 24
param_list           : 18
params               : 16
program              : 0
return_stmt          : 34
stmt                 : 32 44 45 46 46
stmt_list            : 27 32
type_spec            : 7 8 9 16 25 26 51
var_decl             : 6 30 40 41
var_decl_list        : 39 41
while_stmt           : 35


state 0

    (0) S' -> . program
    (1) program -> . decl_list
    (2) decl_list -> . decl
    (3) decl_list -> . decl_list decl
    (4) decl -> . class_decl
    (5) decl -> . func_decl
    (6) decl -> . var_decl
    (39) class_decl -> . CLASS IDENT { var_decl_list }
    (16) func_decl -> . type_spec IDENT ( params ) compound_stmt
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CLASS           shift and go to state 7
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    program                        shift and go to state 1
    decl_list                      shift and go to state 2
    decl                           shift and go to state 3
    class_decl                     shift and go to state 4
    func_decl                      shift and go to state 5
    var_decl                       shift and go to state 6
    type_spec                      shift and go to state 8

state 1

    (0) S' -> program .


state 2

    (1) program -> decl_list .
    (3) decl_list -> decl_list . decl
    (4) decl -> . class_decl
    (5) decl -> . func_decl
    (6) decl -> . var_decl
    (39) class_decl -> . CLASS IDENT { var_decl_list }
    (16) func_decl -> . type_spec IDENT ( params ) compound_stmt
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    $end            reduce using rule 1 (program -> decl_list .)
    CLASS           shift and go to state 7
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    decl                           shift and go to state 15
    class_decl                     shift and go to state 4
    func_decl                      shift and go to state 5
    var_decl                       shift and go to state 6
    type_spec                      shift and go to state 8

state 3

    (2) decl_list -> decl .
    CLASS           reduce using rule 2 (decl_list -> decl .)
    CHAR            reduce using rule 2 (decl_list -> decl .)
    DOUBLE          reduce using rule 2 (decl_list -> decl .)
    FLOAT           reduce using rule 2 (decl_list -> decl .)
    INT             reduce using rule 2 (decl_list -> decl .)
    BOOL            reduce using rule 2 (decl_list -> decl .)
    VOID            reduce using rule 2 (decl_list -> decl .)
    $end            reduce using rule 2 (decl_list -> decl .)


state 4

    (4) decl -> class_decl .
    CLASS           reduce using rule 4 (decl -> class_decl .)
    CHAR            reduce using rule 4 (decl -> class_decl .)
    DOUBLE          reduce using rule 4 (decl -> class_decl .)
    FLOAT           reduce using rule 4 (decl -> class_decl .)
    INT             reduce using rule 4 (decl -> class_decl .)
    BOOL            reduce using rule 4 (decl -> class_decl .)
    VOID            reduce using rule 4 (decl -> class_decl .)
    $end            reduce using rule 4 (decl -> class_decl .)


state 5

    (5) decl -> func_decl .
    CLASS           reduce using rule 5 (decl -> func_decl .)
    CHAR            reduce using rule 5 (decl -> func_decl .)
    DOUBLE          reduce using rule 5 (decl -> func_decl .)
    FLOAT           reduce using rule 5 (decl -> func_decl .)
    INT             reduce using rule 5 (decl -> func_decl .)
    BOOL            reduce using rule 5 (decl -> func_decl .)
    VOID            reduce using rule 5 (decl -> func_decl .)
    $end            reduce using rule 5 (decl -> func_decl .)


state 6

    (6) decl -> var_decl .
    CLASS           reduce using rule 6 (decl -> var_decl .)
    CHAR            reduce using rule 6 (decl -> var_decl .)
    DOUBLE          reduce using rule 6 (decl -> var_decl .)
    FLOAT           reduce using rule 6 (decl -> var_decl .)
    INT             reduce using rule 6 (decl -> var_decl .)
    BOOL            reduce using rule 6 (decl -> var_decl .)
    VOID            reduce using rule 6 (decl -> var_decl .)
    $end            reduce using rule 6 (decl -> var_decl .)


state 7

    (39) class_decl -> CLASS . IDENT { var_decl_list }
    IDENT           shift and go to state 16


state 8

    (16) func_decl -> type_spec . IDENT ( params ) compound_stmt
    (7) var_decl -> type_spec . IDENT [ expr ] ;
    (8) var_decl -> type_spec . IDENT = expr ;
    (9) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 17


state 9

    (10) type_spec -> CHAR .
    IDENT           reduce using rule 10 (type_spec -> CHAR .)
    [               reduce using rule 10 (type_spec -> CHAR .)


state 10

    (11) type_spec -> DOUBLE .
    IDENT           reduce using rule 11 (type_spec -> DOUBLE .)
    [               reduce using rule 11 (type_spec -> DOUBLE .)


state 11

    (12) type_spec -> FLOAT .
    IDENT           reduce using rule 12 (type_spec -> FLOAT .)
    [               reduce using rule 12 (type_spec -> FLOAT .)


state 12

    (13) type_spec -> INT .
    IDENT           reduce using rule 13 (type_spec -> INT .)
    [               reduce using rule 13 (type_spec -> INT .)


state 13

    (14) type_spec -> BOOL .
    IDENT           reduce using rule 14 (type_spec -> BOOL .)
    [               reduce using rule 14 (type_spec -> BOOL .)


state 14

    (15) type_spec -> VOID .
    IDENT           reduce using rule 15 (type_spec -> VOID .)
    [               reduce using rule 15 (type_spec -> VOID .)


state 15

    (3) decl_list -> decl_list decl .
    CLASS           reduce using rule 3 (decl_list -> decl_list decl .)
    CHAR            reduce using rule 3 (decl_list -> decl_list decl .)
    DOUBLE          reduce using rule 3 (decl_list -> decl_list decl .)
    FLOAT           reduce using rule 3 (decl_list -> decl_list decl .)
    INT             reduce using rule 3 (decl_list -> decl_list decl .)
    BOOL            reduce using rule 3 (decl_list -> decl_list decl .)
    VOID            reduce using rule 3 (decl_list -> decl_list decl .)
    $end            reduce using rule 3 (decl_list -> decl_list decl .)


state 16

    (39) class_decl -> CLASS IDENT . { var_decl_list }
    {               shift and go to state 18


state 17

    (16) func_decl -> type_spec IDENT . ( params ) compound_stmt
    (7) var_decl -> type_spec IDENT . [ expr ] ;
    (8) var_decl -> type_spec IDENT . = expr ;
    (9) var_decl -> type_spec IDENT . ;
    (               shift and go to state 19
    [               shift and go to state 20
    =               shift and go to state 22
    ;               shift and go to state 21


state 18

    (39) class_decl -> CLASS IDENT { . var_decl_list }
    (40) var_decl_list -> . var_decl
    (41) var_decl_list -> . var_decl_list var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    var_decl_list                  shift and go to state 23
    var_decl                       shift and go to state 24
    type_spec                      shift and go to state 25

state 19

    (16) func_decl -> type_spec IDENT ( . params ) compound_stmt
    (17) params -> . VOID
    (18) params -> . param_list
    (19) param_list -> . param _1_0x2c_param_repeat
    (25) param -> . type_spec IDENT [ ]
    (26) param -> . type_spec IDENT
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    VOID            shift and go to state 28
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13

    type_spec                      shift and go to state 26
    params                         shift and go to state 27
    param_list                     shift and go to state 29
    param                          shift and go to state 30

state 20

    (7) var_decl -> type_spec IDENT [ . expr ] ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 32

state 21

    (9) var_decl -> type_spec IDENT ; .
    CLASS           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    CHAR            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    DOUBLE          reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    FLOAT           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    INT             reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    BOOL            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    VOID            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    $end            reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    }               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    CONTINUE        reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    BREAK           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    RETURN          reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    WHILE           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    IF              reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    {               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    ;               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    NEW             reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    CHAR_LIT        reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    STRING_LIT      reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    FLOAT_LIT       reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    INT_LIT         reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    BOOL_LIT        reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    IDENT           reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    (               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    +               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    -               reduce using rule 9 (var_decl -> type_spec IDENT ; .)
    !               reduce using rule 9 (var_decl -> type_spec IDENT ; .)


state 22

    (8) var_decl -> type_spec IDENT = . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 43

state 23

    (39) class_decl -> CLASS IDENT { var_decl_list . }
    (41) var_decl_list -> var_decl_list . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    }               shift and go to state 44
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    var_decl                       shift and go to state 45
    type_spec                      shift and go to state 25

state 24

    (40) var_decl_list -> var_decl .
    }               reduce using rule 40 (var_decl_list -> var_decl .)
    CHAR            reduce using rule 40 (var_decl_list -> var_decl .)
    DOUBLE          reduce using rule 40 (var_decl_list -> var_decl .)
    FLOAT           reduce using rule 40 (var_decl_list -> var_decl .)
    INT             reduce using rule 40 (var_decl_list -> var_decl .)
    BOOL            reduce using rule 40 (var_decl_list -> var_decl .)
    VOID            reduce using rule 40 (var_decl_list -> var_decl .)


state 25

    (7) var_decl -> type_spec . IDENT [ expr ] ;
    (8) var_decl -> type_spec . IDENT = expr ;
    (9) var_decl -> type_spec . IDENT ;
    IDENT           shift and go to state 46


state 26

    (25) param -> type_spec . IDENT [ ]
    (26) param -> type_spec . IDENT
    IDENT           shift and go to state 47


state 27

    (16) func_decl -> type_spec IDENT ( params . ) compound_stmt
    )               shift and go to state 48


state 28

    (17) params -> VOID .
    (15) type_spec -> VOID .
    )               reduce using rule 17 (params -> VOID .)
    IDENT           reduce using rule 15 (type_spec -> VOID .)


state 29

    (18) params -> param_list .
    )               reduce using rule 18 (params -> param_list .)


state 30

    (19) param_list -> param . _1_0x2c_param_repeat
    (20) _1_0x2c_param_repeat -> . _1_0x2c_param_items
    (21) _1_0x2c_param_repeat -> .
    (22) _1_0x2c_param_items -> . _1_0x2c_param_items _1_0x2c_param_item
    (23) _1_0x2c_param_items -> . _1_0x2c_param_item
    (24) _1_0x2c_param_item -> . , param
    )               reduce using rule 21 (_1_0x2c_param_repeat -> .)
    ,               shift and go to state 52

    _1_0x2c_param_repeat           shift and go to state 49
    _1_0x2c_param_items            shift and go to state 50
    _1_0x2c_param_item             shift and go to state 51

state 31

    (57) expr -> IDENT . . SIZE
    (58) expr -> IDENT . ( args )
    (59) expr -> IDENT . [ expr ]
    (60) expr -> IDENT .
    (78) expr -> IDENT . [ expr ] = expr
    (79) expr -> IDENT . = expr
    .               shift and go to state 53
    (               shift and go to state 54
    [               shift and go to state 55
    ]               reduce using rule 60 (expr -> IDENT .)
    %               reduce using rule 60 (expr -> IDENT .)
    /               reduce using rule 60 (expr -> IDENT .)
    *               reduce using rule 60 (expr -> IDENT .)
    -               reduce using rule 60 (expr -> IDENT .)
    +               reduce using rule 60 (expr -> IDENT .)
    >               reduce using rule 60 (expr -> IDENT .)
    GE              reduce using rule 60 (expr -> IDENT .)
    <               reduce using rule 60 (expr -> IDENT .)
    LE              reduce using rule 60 (expr -> IDENT .)
    NE              reduce using rule 60 (expr -> IDENT .)
    EQ              reduce using rule 60 (expr -> IDENT .)
    AND             reduce using rule 60 (expr -> IDENT .)
    OR              reduce using rule 60 (expr -> IDENT .)
    ;               reduce using rule 60 (expr -> IDENT .)
    )               reduce using rule 60 (expr -> IDENT .)
    ,               reduce using rule 60 (expr -> IDENT .)
    =               shift and go to state 56


state 32

    (7) var_decl -> type_spec IDENT [ expr . ] ;
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               shift and go to state 57
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 33

    (51) expr -> NEW . type_spec [ expr ]
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    type_spec                      shift and go to state 71

state 34

    (52) expr -> CHAR_LIT .
    ]               reduce using rule 52 (expr -> CHAR_LIT .)
    %               reduce using rule 52 (expr -> CHAR_LIT .)
    /               reduce using rule 52 (expr -> CHAR_LIT .)
    *               reduce using rule 52 (expr -> CHAR_LIT .)
    -               reduce using rule 52 (expr -> CHAR_LIT .)
    +               reduce using rule 52 (expr -> CHAR_LIT .)
    >               reduce using rule 52 (expr -> CHAR_LIT .)
    GE              reduce using rule 52 (expr -> CHAR_LIT .)
    <               reduce using rule 52 (expr -> CHAR_LIT .)
    LE              reduce using rule 52 (expr -> CHAR_LIT .)
    NE              reduce using rule 52 (expr -> CHAR_LIT .)
    EQ              reduce using rule 52 (expr -> CHAR_LIT .)
    AND             reduce using rule 52 (expr -> CHAR_LIT .)
    OR              reduce using rule 52 (expr -> CHAR_LIT .)
    ;               reduce using rule 52 (expr -> CHAR_LIT .)
    )               reduce using rule 52 (expr -> CHAR_LIT .)
    ,               reduce using rule 52 (expr -> CHAR_LIT .)


state 35

    (53) expr -> STRING_LIT .
    ]               reduce using rule 53 (expr -> STRING_LIT .)
    %               reduce using rule 53 (expr -> STRING_LIT .)
    /               reduce using rule 53 (expr -> STRING_LIT .)
    *               reduce using rule 53 (expr -> STRING_LIT .)
    -               reduce using rule 53 (expr -> STRING_LIT .)
    +               reduce using rule 53 (expr -> STRING_LIT .)
    >               reduce using rule 53 (expr -> STRING_LIT .)
    GE              reduce using rule 53 (expr -> STRING_LIT .)
    <               reduce using rule 53 (expr -> STRING_LIT .)
    LE              reduce using rule 53 (expr -> STRING_LIT .)
    NE              reduce using rule 53 (expr -> STRING_LIT .)
    EQ              reduce using rule 53 (expr -> STRING_LIT .)
    AND             reduce using rule 53 (expr -> STRING_LIT .)
    OR              reduce using rule 53 (expr -> STRING_LIT .)
    ;               reduce using rule 53 (expr -> STRING_LIT .)
    )               reduce using rule 53 (expr -> STRING_LIT .)
    ,               reduce using rule 53 (expr -> STRING_LIT .)


state 36

    (54) expr -> FLOAT_LIT .
    ]               reduce using rule 54 (expr -> FLOAT_LIT .)
    %               reduce using rule 54 (expr -> FLOAT_LIT .)
    /               reduce using rule 54 (expr -> FLOAT_LIT .)
    *               reduce using rule 54 (expr -> FLOAT_LIT .)
    -               reduce using rule 54 (expr -> FLOAT_LIT .)
    +               reduce using rule 54 (expr -> FLOAT_LIT .)
    >               reduce using rule 54 (expr -> FLOAT_LIT .)
    GE              reduce using rule 54 (expr -> FLOAT_LIT .)
    <               reduce using rule 54 (expr -> FLOAT_LIT .)
    LE              reduce using rule 54 (expr -> FLOAT_LIT .)
    NE              reduce using rule 54 (expr -> FLOAT_LIT .)
    EQ              reduce using rule 54 (expr -> FLOAT_LIT .)
    AND             reduce using rule 54 (expr -> FLOAT_LIT .)
    OR              reduce using rule 54 (expr -> FLOAT_LIT .)
    ;               reduce using rule 54 (expr -> FLOAT_LIT .)
    )               reduce using rule 54 (expr -> FLOAT_LIT .)
    ,               reduce using rule 54 (expr -> FLOAT_LIT .)


state 37

    (55) expr -> INT_LIT .
    ]               reduce using rule 55 (expr -> INT_LIT .)
    %               reduce using rule 55 (expr -> INT_LIT .)
    /               reduce using rule 55 (expr -> INT_LIT .)
    *               reduce using rule 55 (expr -> INT_LIT .)
    -               reduce using rule 55 (expr -> INT_LIT .)
    +               reduce using rule 55 (expr -> INT_LIT .)
    >               reduce using rule 55 (expr -> INT_LIT .)
    GE              reduce using rule 55 (expr -> INT_LIT .)
    <               reduce using rule 55 (expr -> INT_LIT .)
    LE              reduce using rule 55 (expr -> INT_LIT .)
    NE              reduce using rule 55 (expr -> INT_LIT .)
    EQ              reduce using rule 55 (expr -> INT_LIT .)
    AND             reduce using rule 55 (expr -> INT_LIT .)
    OR              reduce using rule 55 (expr -> INT_LIT .)
    ;               reduce using rule 55 (expr -> INT_LIT .)
    )               reduce using rule 55 (expr -> INT_LIT .)
    ,               reduce using rule 55 (expr -> INT_LIT .)


state 38

    (56) expr -> BOOL_LIT .
    ]               reduce using rule 56 (expr -> BOOL_LIT .)
    %               reduce using rule 56 (expr -> BOOL_LIT .)
    /               reduce using rule 56 (expr -> BOOL_LIT .)
    *               reduce using rule 56 (expr -> BOOL_LIT .)
    -               reduce using rule 56 (expr -> BOOL_LIT .)
    +               reduce using rule 56 (expr -> BOOL_LIT .)
    >               reduce using rule 56 (expr -> BOOL_LIT .)
    GE              reduce using rule 56 (expr -> BOOL_LIT .)
    <               reduce using rule 56 (expr -> BOOL_LIT .)
    LE              reduce using rule 56 (expr -> BOOL_LIT .)
    NE              reduce using rule 56 (expr -> BOOL_LIT .)
    EQ              reduce using rule 56 (expr -> BOOL_LIT .)
    AND             reduce using rule 56 (expr -> BOOL_LIT .)
    OR              reduce using rule 56 (expr -> BOOL_LIT .)
    ;               reduce using rule 56 (expr -> BOOL_LIT .)
    )               reduce using rule 56 (expr -> BOOL_LIT .)
    ,               reduce using rule 56 (expr -> BOOL_LIT .)


state 39

    (61) expr -> ( . expr )
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 72

state 40

    (62) expr -> + . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 73

state 41

    (63) expr -> - . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 74

state 42

    (64) expr -> ! . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 75

state 43

    (8) var_decl -> type_spec IDENT = expr . ;
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ;               shift and go to state 76
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 44

    (39) class_decl -> CLASS IDENT { var_decl_list } .
    CLASS           reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    CHAR            reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    DOUBLE          reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    FLOAT           reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    INT             reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    BOOL            reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    VOID            reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)
    $end            reduce using rule 39 (class_decl -> CLASS IDENT { var_decl_list } .)


state 45

    (41) var_decl_list -> var_decl_list var_decl .
    }               reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    CHAR            reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    DOUBLE          reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    FLOAT           reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    INT             reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    BOOL            reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)
    VOID            reduce using rule 41 (var_decl_list -> var_decl_list var_decl .)


state 46

    (7) var_decl -> type_spec IDENT . [ expr ] ;
    (8) var_decl -> type_spec IDENT . = expr ;
    (9) var_decl -> type_spec IDENT . ;
    [               shift and go to state 20
    =               shift and go to state 22
    ;               shift and go to state 21


state 47

    (25) param -> type_spec IDENT . [ ]
    (26) param -> type_spec IDENT .
    [               shift and go to state 77
    ,               reduce using rule 26 (param -> type_spec IDENT .)
    )               reduce using rule 26 (param -> type_spec IDENT .)


state 48

    (16) func_decl -> type_spec IDENT ( params ) . compound_stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    {               shift and go to state 79

    compound_stmt                  shift and go to state 78

state 49

    (19) param_list -> param _1_0x2c_param_repeat .
    )               reduce using rule 19 (param_list -> param _1_0x2c_param_repeat .)


state 50

    (20) _1_0x2c_param_repeat -> _1_0x2c_param_items .
    (22) _1_0x2c_param_items -> _1_0x2c_param_items . _1_0x2c_param_item
    (24) _1_0x2c_param_item -> . , param
    )               reduce using rule 20 (_1_0x2c_param_repeat -> _1_0x2c_param_items .)
    ,               shift and go to state 52

    _1_0x2c_param_item             shift and go to state 80

state 51

    (23) _1_0x2c_param_items -> _1_0x2c_param_item .
    ,               reduce using rule 23 (_1_0x2c_param_items -> _1_0x2c_param_item .)
    )               reduce using rule 23 (_1_0x2c_param_items -> _1_0x2c_param_item .)


state 52

    (24) _1_0x2c_param_item -> , . param
    (25) param -> . type_spec IDENT [ ]
    (26) param -> . type_spec IDENT
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    param                          shift and go to state 81
    type_spec                      shift and go to state 26

state 53

    (57) expr -> IDENT . . SIZE
    SIZE            shift and go to state 82


state 54

    (58) expr -> IDENT ( . args )
    (80) args -> . empty
    (81) args -> . arg_list
    (85) empty -> .
    (82) arg_list -> . expr _2_0x2c_expr_optional
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    )               reduce using rule 85 (empty -> .)
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    args                           shift and go to state 83
    empty                          shift and go to state 84
    arg_list                       shift and go to state 85
    expr                           shift and go to state 86

state 55

    (59) expr -> IDENT [ . expr ]
    (78) expr -> IDENT [ . expr ] = expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 87

state 56

    (79) expr -> IDENT = . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 88

state 57

    (7) var_decl -> type_spec IDENT [ expr ] . ;
    ;               shift and go to state 89


state 58

    (65) expr -> expr % . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 90

state 59

    (66) expr -> expr / . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 91

state 60

    (67) expr -> expr * . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 92

state 61

    (68) expr -> expr - . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 93

state 62

    (69) expr -> expr + . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 94

state 63

    (70) expr -> expr > . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 95

state 64

    (71) expr -> expr GE . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 96

state 65

    (72) expr -> expr < . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 97

state 66

    (73) expr -> expr LE . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 98

state 67

    (74) expr -> expr NE . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 99

state 68

    (75) expr -> expr EQ . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 100

state 69

    (76) expr -> expr AND . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 101

state 70

    (77) expr -> expr OR . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 102

state 71

    (51) expr -> NEW type_spec . [ expr ]
    [               shift and go to state 103


state 72

    (61) expr -> ( expr . )
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    )               shift and go to state 104
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 73

    (62) expr -> + expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 62 (expr -> + expr .)
    %               reduce using rule 62 (expr -> + expr .)
    /               reduce using rule 62 (expr -> + expr .)
    *               reduce using rule 62 (expr -> + expr .)
    -               reduce using rule 62 (expr -> + expr .)
    +               reduce using rule 62 (expr -> + expr .)
    >               reduce using rule 62 (expr -> + expr .)
    GE              reduce using rule 62 (expr -> + expr .)
    <               reduce using rule 62 (expr -> + expr .)
    LE              reduce using rule 62 (expr -> + expr .)
    NE              reduce using rule 62 (expr -> + expr .)
    EQ              reduce using rule 62 (expr -> + expr .)
    AND             reduce using rule 62 (expr -> + expr .)
    OR              reduce using rule 62 (expr -> + expr .)
    ;               reduce using rule 62 (expr -> + expr .)
    )               reduce using rule 62 (expr -> + expr .)
    ,               reduce using rule 62 (expr -> + expr .)


state 74

    (63) expr -> - expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 63 (expr -> - expr .)
    %               reduce using rule 63 (expr -> - expr .)
    /               reduce using rule 63 (expr -> - expr .)
    *               reduce using rule 63 (expr -> - expr .)
    -               reduce using rule 63 (expr -> - expr .)
    +               reduce using rule 63 (expr -> - expr .)
    >               reduce using rule 63 (expr -> - expr .)
    GE              reduce using rule 63 (expr -> - expr .)
    <               reduce using rule 63 (expr -> - expr .)
    LE              reduce using rule 63 (expr -> - expr .)
    NE              reduce using rule 63 (expr -> - expr .)
    EQ              reduce using rule 63 (expr -> - expr .)
    AND             reduce using rule 63 (expr -> - expr .)
    OR              reduce using rule 63 (expr -> - expr .)
    ;               reduce using rule 63 (expr -> - expr .)
    )               reduce using rule 63 (expr -> - expr .)
    ,               reduce using rule 63 (expr -> - expr .)


state 75

    (64) expr -> ! expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 64 (expr -> ! expr .)
    %               reduce using rule 64 (expr -> ! expr .)
    /               reduce using rule 64 (expr -> ! expr .)
    *               reduce using rule 64 (expr -> ! expr .)
    -               reduce using rule 64 (expr -> ! expr .)
    +               reduce using rule 64 (expr -> ! expr .)
    >               reduce using rule 64 (expr -> ! expr .)
    GE              reduce using rule 64 (expr -> ! expr .)
    <               reduce using rule 64 (expr -> ! expr .)
    LE              reduce using rule 64 (expr -> ! expr .)
    NE              reduce using rule 64 (expr -> ! expr .)
    EQ              reduce using rule 64 (expr -> ! expr .)
    AND             reduce using rule 64 (expr -> ! expr .)
    OR              reduce using rule 64 (expr -> ! expr .)
    ;               reduce using rule 64 (expr -> ! expr .)
    )               reduce using rule 64 (expr -> ! expr .)
    ,               reduce using rule 64 (expr -> ! expr .)


state 76

    (8) var_decl -> type_spec IDENT = expr ; .
    CLASS           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    CHAR            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    DOUBLE          reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    FLOAT           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    INT             reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    BOOL            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    VOID            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    $end            reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    }               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    CONTINUE        reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    BREAK           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    RETURN          reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    WHILE           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    IF              reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    {               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    ;               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    NEW             reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    CHAR_LIT        reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    STRING_LIT      reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    FLOAT_LIT       reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    INT_LIT         reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    BOOL_LIT        reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    IDENT           reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    (               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    +               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    -               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)
    !               reduce using rule 8 (var_decl -> type_spec IDENT = expr ; .)


state 77

    (25) param -> type_spec IDENT [ . ]
    ]               shift and go to state 105


state 78

    (16) func_decl -> type_spec IDENT ( params ) compound_stmt .
    CLASS           reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    CHAR            reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    DOUBLE          reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    FLOAT           reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    INT             reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    BOOL            reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    VOID            reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)
    $end            reduce using rule 16 (func_decl -> type_spec IDENT ( params ) compound_stmt .)


state 79

    (27) compound_stmt -> { . local_decls stmt_list }
    (28) local_decls -> . empty
    (29) local_decls -> . local_decl local_decls
    (85) empty -> .
    (30) local_decl -> . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CONTINUE        reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    {               reduce using rule 85 (empty -> .)
    ;               reduce using rule 85 (empty -> .)
    NEW             reduce using rule 85 (empty -> .)
    CHAR_LIT        reduce using rule 85 (empty -> .)
    STRING_LIT      reduce using rule 85 (empty -> .)
    FLOAT_LIT       reduce using rule 85 (empty -> .)
    INT_LIT         reduce using rule 85 (empty -> .)
    BOOL_LIT        reduce using rule 85 (empty -> .)
    IDENT           reduce using rule 85 (empty -> .)
    (               reduce using rule 85 (empty -> .)
    +               reduce using rule 85 (empty -> .)
    -               reduce using rule 85 (empty -> .)
    !               reduce using rule 85 (empty -> .)
    }               reduce using rule 85 (empty -> .)
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    local_decls                    shift and go to state 106
    empty                          shift and go to state 107
    local_decl                     shift and go to state 108
    var_decl                       shift and go to state 109
    type_spec                      shift and go to state 25

state 80

    (22) _1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .
    ,               reduce using rule 22 (_1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .)
    )               reduce using rule 22 (_1_0x2c_param_items -> _1_0x2c_param_items _1_0x2c_param_item .)


state 81

    (24) _1_0x2c_param_item -> , param .
    ,               reduce using rule 24 (_1_0x2c_param_item -> , param .)
    )               reduce using rule 24 (_1_0x2c_param_item -> , param .)


state 82

    (57) expr -> IDENT . SIZE .
    ]               reduce using rule 57 (expr -> IDENT . SIZE .)
    %               reduce using rule 57 (expr -> IDENT . SIZE .)
    /               reduce using rule 57 (expr -> IDENT . SIZE .)
    *               reduce using rule 57 (expr -> IDENT . SIZE .)
    -               reduce using rule 57 (expr -> IDENT . SIZE .)
    +               reduce using rule 57 (expr -> IDENT . SIZE .)
    >               reduce using rule 57 (expr -> IDENT . SIZE .)
    GE              reduce using rule 57 (expr -> IDENT . SIZE .)
    <               reduce using rule 57 (expr -> IDENT . SIZE .)
    LE              reduce using rule 57 (expr -> IDENT . SIZE .)
    NE              reduce using rule 57 (expr -> IDENT . SIZE .)
    EQ              reduce using rule 57 (expr -> IDENT . SIZE .)
    AND             reduce using rule 57 (expr -> IDENT . SIZE .)
    OR              reduce using rule 57 (expr -> IDENT . SIZE .)
    ;               reduce using rule 57 (expr -> IDENT . SIZE .)
    )               reduce using rule 57 (expr -> IDENT . SIZE .)
    ,               reduce using rule 57 (expr -> IDENT . SIZE .)


state 83

    (58) expr -> IDENT ( args . )
    )               shift and go to state 110


state 84

    (80) args -> empty .
    )               reduce using rule 80 (args -> empty .)


state 85

    (81) args -> arg_list .
    )               reduce using rule 81 (args -> arg_list .)


state 86

    (82) arg_list -> expr . _2_0x2c_expr_optional
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    (83) _2_0x2c_expr_optional -> . , expr
    (84) _2_0x2c_expr_optional -> .
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70
    ,               shift and go to state 112
    )               reduce using rule 84 (_2_0x2c_expr_optional -> .)

    _2_0x2c_expr_optional          shift and go to state 111

state 87

    (59) expr -> IDENT [ expr . ]
    (78) expr -> IDENT [ expr . ] = expr
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               shift and go to state 113
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 88

    (79) expr -> IDENT = expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 79 (expr -> IDENT = expr .)
    ;               reduce using rule 79 (expr -> IDENT = expr .)
    )               reduce using rule 79 (expr -> IDENT = expr .)
    ,               reduce using rule 79 (expr -> IDENT = expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 89

    (7) var_decl -> type_spec IDENT [ expr ] ; .
    CLASS           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CHAR            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    DOUBLE          reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    FLOAT           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    INT             reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BOOL            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    VOID            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    $end            reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    }               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CONTINUE        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BREAK           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    RETURN          reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    WHILE           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    IF              reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    {               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    ;               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    NEW             reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    CHAR_LIT        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    STRING_LIT      reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    FLOAT_LIT       reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    INT_LIT         reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    BOOL_LIT        reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    IDENT           reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    (               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    +               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    -               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)
    !               reduce using rule 7 (var_decl -> type_spec IDENT [ expr ] ; .)


state 90

    (65) expr -> expr % expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 65 (expr -> expr % expr .)
    %               reduce using rule 65 (expr -> expr % expr .)
    /               reduce using rule 65 (expr -> expr % expr .)
    *               reduce using rule 65 (expr -> expr % expr .)
    -               reduce using rule 65 (expr -> expr % expr .)
    +               reduce using rule 65 (expr -> expr % expr .)
    >               reduce using rule 65 (expr -> expr % expr .)
    GE              reduce using rule 65 (expr -> expr % expr .)
    <               reduce using rule 65 (expr -> expr % expr .)
    LE              reduce using rule 65 (expr -> expr % expr .)
    NE              reduce using rule 65 (expr -> expr % expr .)
    EQ              reduce using rule 65 (expr -> expr % expr .)
    AND             reduce using rule 65 (expr -> expr % expr .)
    OR              reduce using rule 65 (expr -> expr % expr .)
    ;               reduce using rule 65 (expr -> expr % expr .)
    )               reduce using rule 65 (expr -> expr % expr .)
    ,               reduce using rule 65 (expr -> expr % expr .)


state 91

    (66) expr -> expr / expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 66 (expr -> expr / expr .)
    %               reduce using rule 66 (expr -> expr / expr .)
    /               reduce using rule 66 (expr -> expr / expr .)
    *               reduce using rule 66 (expr -> expr / expr .)
    -               reduce using rule 66 (expr -> expr / expr .)
    +               reduce using rule 66 (expr -> expr / expr .)
    >               reduce using rule 66 (expr -> expr / expr .)
    GE              reduce using rule 66 (expr -> expr / expr .)
    <               reduce using rule 66 (expr -> expr / expr .)
    LE              reduce using rule 66 (expr -> expr / expr .)
    NE              reduce using rule 66 (expr -> expr / expr .)
    EQ              reduce using rule 66 (expr -> expr / expr .)
    AND             reduce using rule 66 (expr -> expr / expr .)
    OR              reduce using rule 66 (expr -> expr / expr .)
    ;               reduce using rule 66 (expr -> expr / expr .)
    )               reduce using rule 66 (expr -> expr / expr .)
    ,               reduce using rule 66 (expr -> expr / expr .)


state 92

    (67) expr -> expr * expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 67 (expr -> expr * expr .)
    %               reduce using rule 67 (expr -> expr * expr .)
    /               reduce using rule 67 (expr -> expr * expr .)
    *               reduce using rule 67 (expr -> expr * expr .)
    -               reduce using rule 67 (expr -> expr * expr .)
    +               reduce using rule 67 (expr -> expr * expr .)
    >               reduce using rule 67 (expr -> expr * expr .)
    GE              reduce using rule 67 (expr -> expr * expr .)
    <               reduce using rule 67 (expr -> expr * expr .)
    LE              reduce using rule 67 (expr -> expr * expr .)
    NE              reduce using rule 67 (expr -> expr * expr .)
    EQ              reduce using rule 67 (expr -> expr * expr .)
    AND             reduce using rule 67 (expr -> expr * expr .)
    OR              reduce using rule 67 (expr -> expr * expr .)
    ;               reduce using rule 67 (expr -> expr * expr .)
    )               reduce using rule 67 (expr -> expr * expr .)
    ,               reduce using rule 67 (expr -> expr * expr .)


state 93

    (68) expr -> expr - expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 68 (expr -> expr - expr .)
    -               reduce using rule 68 (expr -> expr - expr .)
    +               reduce using rule 68 (expr -> expr - expr .)
    >               reduce using rule 68 (expr -> expr - expr .)
    GE              reduce using rule 68 (expr -> expr - expr .)
    <               reduce using rule 68 (expr -> expr - expr .)
    LE              reduce using rule 68 (expr -> expr - expr .)
    NE              reduce using rule 68 (expr -> expr - expr .)
    EQ              reduce using rule 68 (expr -> expr - expr .)
    AND             reduce using rule 68 (expr -> expr - expr .)
    OR              reduce using rule 68 (expr -> expr - expr .)
    ;               reduce using rule 68 (expr -> expr - expr .)
    )               reduce using rule 68 (expr -> expr - expr .)
    ,               reduce using rule 68 (expr -> expr - expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60


state 94

    (69) expr -> expr + expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 69 (expr -> expr + expr .)
    -               reduce using rule 69 (expr -> expr + expr .)
    +               reduce using rule 69 (expr -> expr + expr .)
    >               reduce using rule 69 (expr -> expr + expr .)
    GE              reduce using rule 69 (expr -> expr + expr .)
    <               reduce using rule 69 (expr -> expr + expr .)
    LE              reduce using rule 69 (expr -> expr + expr .)
    NE              reduce using rule 69 (expr -> expr + expr .)
    EQ              reduce using rule 69 (expr -> expr + expr .)
    AND             reduce using rule 69 (expr -> expr + expr .)
    OR              reduce using rule 69 (expr -> expr + expr .)
    ;               reduce using rule 69 (expr -> expr + expr .)
    )               reduce using rule 69 (expr -> expr + expr .)
    ,               reduce using rule 69 (expr -> expr + expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60


state 95

    (70) expr -> expr > expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 70 (expr -> expr > expr .)
    >               reduce using rule 70 (expr -> expr > expr .)
    GE              reduce using rule 70 (expr -> expr > expr .)
    <               reduce using rule 70 (expr -> expr > expr .)
    LE              reduce using rule 70 (expr -> expr > expr .)
    NE              reduce using rule 70 (expr -> expr > expr .)
    EQ              reduce using rule 70 (expr -> expr > expr .)
    AND             reduce using rule 70 (expr -> expr > expr .)
    OR              reduce using rule 70 (expr -> expr > expr .)
    ;               reduce using rule 70 (expr -> expr > expr .)
    )               reduce using rule 70 (expr -> expr > expr .)
    ,               reduce using rule 70 (expr -> expr > expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 96

    (71) expr -> expr GE expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 71 (expr -> expr GE expr .)
    >               reduce using rule 71 (expr -> expr GE expr .)
    GE              reduce using rule 71 (expr -> expr GE expr .)
    <               reduce using rule 71 (expr -> expr GE expr .)
    LE              reduce using rule 71 (expr -> expr GE expr .)
    NE              reduce using rule 71 (expr -> expr GE expr .)
    EQ              reduce using rule 71 (expr -> expr GE expr .)
    AND             reduce using rule 71 (expr -> expr GE expr .)
    OR              reduce using rule 71 (expr -> expr GE expr .)
    ;               reduce using rule 71 (expr -> expr GE expr .)
    )               reduce using rule 71 (expr -> expr GE expr .)
    ,               reduce using rule 71 (expr -> expr GE expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 97

    (72) expr -> expr < expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 72 (expr -> expr < expr .)
    >               reduce using rule 72 (expr -> expr < expr .)
    GE              reduce using rule 72 (expr -> expr < expr .)
    <               reduce using rule 72 (expr -> expr < expr .)
    LE              reduce using rule 72 (expr -> expr < expr .)
    NE              reduce using rule 72 (expr -> expr < expr .)
    EQ              reduce using rule 72 (expr -> expr < expr .)
    AND             reduce using rule 72 (expr -> expr < expr .)
    OR              reduce using rule 72 (expr -> expr < expr .)
    ;               reduce using rule 72 (expr -> expr < expr .)
    )               reduce using rule 72 (expr -> expr < expr .)
    ,               reduce using rule 72 (expr -> expr < expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 98

    (73) expr -> expr LE expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 73 (expr -> expr LE expr .)
    >               reduce using rule 73 (expr -> expr LE expr .)
    GE              reduce using rule 73 (expr -> expr LE expr .)
    <               reduce using rule 73 (expr -> expr LE expr .)
    LE              reduce using rule 73 (expr -> expr LE expr .)
    NE              reduce using rule 73 (expr -> expr LE expr .)
    EQ              reduce using rule 73 (expr -> expr LE expr .)
    AND             reduce using rule 73 (expr -> expr LE expr .)
    OR              reduce using rule 73 (expr -> expr LE expr .)
    ;               reduce using rule 73 (expr -> expr LE expr .)
    )               reduce using rule 73 (expr -> expr LE expr .)
    ,               reduce using rule 73 (expr -> expr LE expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62


state 99

    (74) expr -> expr NE expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 74 (expr -> expr NE expr .)
    NE              reduce using rule 74 (expr -> expr NE expr .)
    EQ              reduce using rule 74 (expr -> expr NE expr .)
    AND             reduce using rule 74 (expr -> expr NE expr .)
    OR              reduce using rule 74 (expr -> expr NE expr .)
    ;               reduce using rule 74 (expr -> expr NE expr .)
    )               reduce using rule 74 (expr -> expr NE expr .)
    ,               reduce using rule 74 (expr -> expr NE expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66


state 100

    (75) expr -> expr EQ expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 75 (expr -> expr EQ expr .)
    NE              reduce using rule 75 (expr -> expr EQ expr .)
    EQ              reduce using rule 75 (expr -> expr EQ expr .)
    AND             reduce using rule 75 (expr -> expr EQ expr .)
    OR              reduce using rule 75 (expr -> expr EQ expr .)
    ;               reduce using rule 75 (expr -> expr EQ expr .)
    )               reduce using rule 75 (expr -> expr EQ expr .)
    ,               reduce using rule 75 (expr -> expr EQ expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66


state 101

    (76) expr -> expr AND expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 76 (expr -> expr AND expr .)
    AND             reduce using rule 76 (expr -> expr AND expr .)
    OR              reduce using rule 76 (expr -> expr AND expr .)
    ;               reduce using rule 76 (expr -> expr AND expr .)
    )               reduce using rule 76 (expr -> expr AND expr .)
    ,               reduce using rule 76 (expr -> expr AND expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68


state 102

    (77) expr -> expr OR expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 77 (expr -> expr OR expr .)
    OR              reduce using rule 77 (expr -> expr OR expr .)
    ;               reduce using rule 77 (expr -> expr OR expr .)
    )               reduce using rule 77 (expr -> expr OR expr .)
    ,               reduce using rule 77 (expr -> expr OR expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69


state 103

    (51) expr -> NEW type_spec [ . expr ]
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 114

state 104

    (61) expr -> ( expr ) .
    ]               reduce using rule 61 (expr -> ( expr ) .)
    %               reduce using rule 61 (expr -> ( expr ) .)
    /               reduce using rule 61 (expr -> ( expr ) .)
    *               reduce using rule 61 (expr -> ( expr ) .)
    -               reduce using rule 61 (expr -> ( expr ) .)
    +               reduce using rule 61 (expr -> ( expr ) .)
    >               reduce using rule 61 (expr -> ( expr ) .)
    GE              reduce using rule 61 (expr -> ( expr ) .)
    <               reduce using rule 61 (expr -> ( expr ) .)
    LE              reduce using rule 61 (expr -> ( expr ) .)
    NE              reduce using rule 61 (expr -> ( expr ) .)
    EQ              reduce using rule 61 (expr -> ( expr ) .)
    AND             reduce using rule 61 (expr -> ( expr ) .)
    OR              reduce using rule 61 (expr -> ( expr ) .)
    ;               reduce using rule 61 (expr -> ( expr ) .)
    )               reduce using rule 61 (expr -> ( expr ) .)
    ,               reduce using rule 61 (expr -> ( expr ) .)


state 105

    (25) param -> type_spec IDENT [ ] .
    ,               reduce using rule 25 (param -> type_spec IDENT [ ] .)
    )               reduce using rule 25 (param -> type_spec IDENT [ ] .)


state 106

    (27) compound_stmt -> { local_decls . stmt_list }
    (31) stmt_list -> . empty
    (32) stmt_list -> . stmt stmt_list
    (85) empty -> .
    (33) stmt -> . break_stmt
    (34) stmt -> . return_stmt
    (35) stmt -> . while_stmt
    (36) stmt -> . if_stmt
    (37) stmt -> . compound_stmt
    (38) stmt -> . expr_stmt
    (49) break_stmt -> . CONTINUE ;
    (50) break_stmt -> . BREAK ;
    (47) return_stmt -> . RETURN ;
    (48) return_stmt -> . RETURN expr ;
    (44) while_stmt -> . WHILE ( expr ) stmt
    (45) if_stmt -> . IF ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    (42) expr_stmt -> . ;
    (43) expr_stmt -> . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    }               reduce using rule 85 (empty -> .)
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    WHILE           shift and go to state 129
    IF              shift and go to state 130
    {               shift and go to state 79
    ;               shift and go to state 125
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    stmt_list                      shift and go to state 115
    empty                          shift and go to state 116
    stmt                           shift and go to state 117
    break_stmt                     shift and go to state 118
    return_stmt                    shift and go to state 119
    while_stmt                     shift and go to state 120
    if_stmt                        shift and go to state 121
    compound_stmt                  shift and go to state 122
    expr_stmt                      shift and go to state 123
    expr                           shift and go to state 128

state 107

    (28) local_decls -> empty .
    CONTINUE        reduce using rule 28 (local_decls -> empty .)
    BREAK           reduce using rule 28 (local_decls -> empty .)
    RETURN          reduce using rule 28 (local_decls -> empty .)
    WHILE           reduce using rule 28 (local_decls -> empty .)
    IF              reduce using rule 28 (local_decls -> empty .)
    {               reduce using rule 28 (local_decls -> empty .)
    ;               reduce using rule 28 (local_decls -> empty .)
    NEW             reduce using rule 28 (local_decls -> empty .)
    CHAR_LIT        reduce using rule 28 (local_decls -> empty .)
    STRING_LIT      reduce using rule 28 (local_decls -> empty .)
    FLOAT_LIT       reduce using rule 28 (local_decls -> empty .)
    INT_LIT         reduce using rule 28 (local_decls -> empty .)
    BOOL_LIT        reduce using rule 28 (local_decls -> empty .)
    IDENT           reduce using rule 28 (local_decls -> empty .)
    (               reduce using rule 28 (local_decls -> empty .)
    +               reduce using rule 28 (local_decls -> empty .)
    -               reduce using rule 28 (local_decls -> empty .)
    !               reduce using rule 28 (local_decls -> empty .)
    }               reduce using rule 28 (local_decls -> empty .)


state 108

    (29) local_decls -> local_decl . local_decls
    (28) local_decls -> . empty
    (29) local_decls -> . local_decl local_decls
    (85) empty -> .
    (30) local_decl -> . var_decl
    (7) var_decl -> . type_spec IDENT [ expr ] ;
    (8) var_decl -> . type_spec IDENT = expr ;
    (9) var_decl -> . type_spec IDENT ;
    (10) type_spec -> . CHAR
    (11) type_spec -> . DOUBLE
    (12) type_spec -> . FLOAT
    (13) type_spec -> . INT
    (14) type_spec -> . BOOL
    (15) type_spec -> . VOID
    CONTINUE        reduce using rule 85 (empty -> .)
    BREAK           reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    WHILE           reduce using rule 85 (empty -> .)
    IF              reduce using rule 85 (empty -> .)
    {               reduce using rule 85 (empty -> .)
    ;               reduce using rule 85 (empty -> .)
    NEW             reduce using rule 85 (empty -> .)
    CHAR_LIT        reduce using rule 85 (empty -> .)
    STRING_LIT      reduce using rule 85 (empty -> .)
    FLOAT_LIT       reduce using rule 85 (empty -> .)
    INT_LIT         reduce using rule 85 (empty -> .)
    BOOL_LIT        reduce using rule 85 (empty -> .)
    IDENT           reduce using rule 85 (empty -> .)
    (               reduce using rule 85 (empty -> .)
    +               reduce using rule 85 (empty -> .)
    -               reduce using rule 85 (empty -> .)
    !               reduce using rule 85 (empty -> .)
    }               reduce using rule 85 (empty -> .)
    CHAR            shift and go to state 9
    DOUBLE          shift and go to state 10
    FLOAT           shift and go to state 11
    INT             shift and go to state 12
    BOOL            shift and go to state 13
    VOID            shift and go to state 14

    local_decl                     shift and go to state 108
    local_decls                    shift and go to state 131
    empty                          shift and go to state 107
    var_decl                       shift and go to state 109
    type_spec                      shift and go to state 25

state 109

    (30) local_decl -> var_decl .
    CHAR            reduce using rule 30 (local_decl -> var_decl .)
    DOUBLE          reduce using rule 30 (local_decl -> var_decl .)
    FLOAT           reduce using rule 30 (local_decl -> var_decl .)
    INT             reduce using rule 30 (local_decl -> var_decl .)
    BOOL            reduce using rule 30 (local_decl -> var_decl .)
    VOID            reduce using rule 30 (local_decl -> var_decl .)
    CONTINUE        reduce using rule 30 (local_decl -> var_decl .)
    BREAK           reduce using rule 30 (local_decl -> var_decl .)
    RETURN          reduce using rule 30 (local_decl -> var_decl .)
    WHILE           reduce using rule 30 (local_decl -> var_decl .)
    IF              reduce using rule 30 (local_decl -> var_decl .)
    {               reduce using rule 30 (local_decl -> var_decl .)
    ;               reduce using rule 30 (local_decl -> var_decl .)
    NEW             reduce using rule 30 (local_decl -> var_decl .)
    CHAR_LIT        reduce using rule 30 (local_decl -> var_decl .)
    STRING_LIT      reduce using rule 30 (local_decl -> var_decl .)
    FLOAT_LIT       reduce using rule 30 (local_decl -> var_decl .)
    INT_LIT         reduce using rule 30 (local_decl -> var_decl .)
    BOOL_LIT        reduce using rule 30 (local_decl -> var_decl .)
    IDENT           reduce using rule 30 (local_decl -> var_decl .)
    (               reduce using rule 30 (local_decl -> var_decl .)
    +               reduce using rule 30 (local_decl -> var_decl .)
    -               reduce using rule 30 (local_decl -> var_decl .)
    !               reduce using rule 30 (local_decl -> var_decl .)
    }               reduce using rule 30 (local_decl -> var_decl .)


state 110

    (58) expr -> IDENT ( args ) .
    ]               reduce using rule 58 (expr -> IDENT ( args ) .)
    %               reduce using rule 58 (expr -> IDENT ( args ) .)
    /               reduce using rule 58 (expr -> IDENT ( args ) .)
    *               reduce using rule 58 (expr -> IDENT ( args ) .)
    -               reduce using rule 58 (expr -> IDENT ( args ) .)
    +               reduce using rule 58 (expr -> IDENT ( args ) .)
    >               reduce using rule 58 (expr -> IDENT ( args ) .)
    GE              reduce using rule 58 (expr -> IDENT ( args ) .)
    <               reduce using rule 58 (expr -> IDENT ( args ) .)
    LE              reduce using rule 58 (expr -> IDENT ( args ) .)
    NE              reduce using rule 58 (expr -> IDENT ( args ) .)
    EQ              reduce using rule 58 (expr -> IDENT ( args ) .)
    AND             reduce using rule 58 (expr -> IDENT ( args ) .)
    OR              reduce using rule 58 (expr -> IDENT ( args ) .)
    ;               reduce using rule 58 (expr -> IDENT ( args ) .)
    )               reduce using rule 58 (expr -> IDENT ( args ) .)
    ,               reduce using rule 58 (expr -> IDENT ( args ) .)


state 111

    (82) arg_list -> expr _2_0x2c_expr_optional .
    )               reduce using rule 82 (arg_list -> expr _2_0x2c_expr_optional .)


state 112

    (83) _2_0x2c_expr_optional -> , . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 132

state 113

    (59) expr -> IDENT [ expr ] .
    (78) expr -> IDENT [ expr ] . = expr
    ]               reduce using rule 59 (expr -> IDENT [ expr ] .)
    %               reduce using rule 59 (expr -> IDENT [ expr ] .)
    /               reduce using rule 59 (expr -> IDENT [ expr ] .)
    *               reduce using rule 59 (expr -> IDENT [ expr ] .)
    -               reduce using rule 59 (expr -> IDENT [ expr ] .)
    +               reduce using rule 59 (expr -> IDENT [ expr ] .)
    >               reduce using rule 59 (expr -> IDENT [ expr ] .)
    GE              reduce using rule 59 (expr -> IDENT [ expr ] .)
    <               reduce using rule 59 (expr -> IDENT [ expr ] .)
    LE              reduce using rule 59 (expr -> IDENT [ expr ] .)
    NE              reduce using rule 59 (expr -> IDENT [ expr ] .)
    EQ              reduce using rule 59 (expr -> IDENT [ expr ] .)
    AND             reduce using rule 59 (expr -> IDENT [ expr ] .)
    OR              reduce using rule 59 (expr -> IDENT [ expr ] .)
    ;               reduce using rule 59 (expr -> IDENT [ expr ] .)
    )               reduce using rule 59 (expr -> IDENT [ expr ] .)
    ,               reduce using rule 59 (expr -> IDENT [ expr ] .)
    =               shift and go to state 133


state 114

    (51) expr -> NEW type_spec [ expr . ]
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               shift and go to state 134
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 115

    (27) compound_stmt -> { local_decls stmt_list . }
    }               shift and go to state 135


state 116

    (31) stmt_list -> empty .
    }               reduce using rule 31 (stmt_list -> empty .)


state 117

    (32) stmt_list -> stmt . stmt_list
    (31) stmt_list -> . empty
    (32) stmt_list -> . stmt stmt_list
    (85) empty -> .
    (33) stmt -> . break_stmt
    (34) stmt -> . return_stmt
    (35) stmt -> . while_stmt
    (36) stmt -> . if_stmt
    (37) stmt -> . compound_stmt
    (38) stmt -> . expr_stmt
    (49) break_stmt -> . CONTINUE ;
    (50) break_stmt -> . BREAK ;
    (47) return_stmt -> . RETURN ;
    (48) return_stmt -> . RETURN expr ;
    (44) while_stmt -> . WHILE ( expr ) stmt
    (45) if_stmt -> . IF ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    (42) expr_stmt -> . ;
    (43) expr_stmt -> . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    }               reduce using rule 85 (empty -> .)
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    WHILE           shift and go to state 129
    IF              shift and go to state 130
    {               shift and go to state 79
    ;               shift and go to state 125
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    stmt                           shift and go to state 117
    stmt_list                      shift and go to state 136
    empty                          shift and go to state 116
    break_stmt                     shift and go to state 118
    return_stmt                    shift and go to state 119
    while_stmt                     shift and go to state 120
    if_stmt                        shift and go to state 121
    compound_stmt                  shift and go to state 122
    expr_stmt                      shift and go to state 123
    expr                           shift and go to state 128

state 118

    (33) stmt -> break_stmt .
    CONTINUE        reduce using rule 33 (stmt -> break_stmt .)
    BREAK           reduce using rule 33 (stmt -> break_stmt .)
    RETURN          reduce using rule 33 (stmt -> break_stmt .)
    WHILE           reduce using rule 33 (stmt -> break_stmt .)
    IF              reduce using rule 33 (stmt -> break_stmt .)
    {               reduce using rule 33 (stmt -> break_stmt .)
    ;               reduce using rule 33 (stmt -> break_stmt .)
    NEW             reduce using rule 33 (stmt -> break_stmt .)
    CHAR_LIT        reduce using rule 33 (stmt -> break_stmt .)
    STRING_LIT      reduce using rule 33 (stmt -> break_stmt .)
    FLOAT_LIT       reduce using rule 33 (stmt -> break_stmt .)
    INT_LIT         reduce using rule 33 (stmt -> break_stmt .)
    BOOL_LIT        reduce using rule 33 (stmt -> break_stmt .)
    IDENT           reduce using rule 33 (stmt -> break_stmt .)
    (               reduce using rule 33 (stmt -> break_stmt .)
    +               reduce using rule 33 (stmt -> break_stmt .)
    -               reduce using rule 33 (stmt -> break_stmt .)
    !               reduce using rule 33 (stmt -> break_stmt .)
    }               reduce using rule 33 (stmt -> break_stmt .)
    ELSE            reduce using rule 33 (stmt -> break_stmt .)


state 119

    (34) stmt -> return_stmt .
    CONTINUE        reduce using rule 34 (stmt -> return_stmt .)
    BREAK           reduce using rule 34 (stmt -> return_stmt .)
    RETURN          reduce using rule 34 (stmt -> return_stmt .)
    WHILE           reduce using rule 34 (stmt -> return_stmt .)
    IF              reduce using rule 34 (stmt -> return_stmt .)
    {               reduce using rule 34 (stmt -> return_stmt .)
    ;               reduce using rule 34 (stmt -> return_stmt .)
    NEW             reduce using rule 34 (stmt -> return_stmt .)
    CHAR_LIT        reduce using rule 34 (stmt -> return_stmt .)
    STRING_LIT      reduce using rule 34 (stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 34 (stmt -> return_stmt .)
    INT_LIT         reduce using rule 34 (stmt -> return_stmt .)
    BOOL_LIT        reduce using rule 34 (stmt -> return_stmt .)
    IDENT           reduce using rule 34 (stmt -> return_stmt .)
    (               reduce using rule 34 (stmt -> return_stmt .)
    +               reduce using rule 34 (stmt -> return_stmt .)
    -               reduce using rule 34 (stmt -> return_stmt .)
    !               reduce using rule 34 (stmt -> return_stmt .)
    }               reduce using rule 34 (stmt -> return_stmt .)
    ELSE            reduce using rule 34 (stmt -> return_stmt .)


state 120

    (35) stmt -> while_stmt .
    CONTINUE        reduce using rule 35 (stmt -> while_stmt .)
    BREAK           reduce using rule 35 (stmt -> while_stmt .)
    RETURN          reduce using rule 35 (stmt -> while_stmt .)
    WHILE           reduce using rule 35 (stmt -> while_stmt .)
    IF              reduce using rule 35 (stmt -> while_stmt .)
    {               reduce using rule 35 (stmt -> while_stmt .)
    ;               reduce using rule 35 (stmt -> while_stmt .)
    NEW             reduce using rule 35 (stmt -> while_stmt .)
    CHAR_LIT        reduce using rule 35 (stmt -> while_stmt .)
    STRING_LIT      reduce using rule 35 (stmt -> while_stmt .)
    FLOAT_LIT       reduce using rule 35 (stmt -> while_stmt .)
    INT_LIT         reduce using rule 35 (stmt -> while_stmt .)
    BOOL_LIT        reduce using rule 35 (stmt -> while_stmt .)
    IDENT           reduce using rule 35 (stmt -> while_stmt .)
    (               reduce using rule 35 (stmt -> while_stmt .)
    +               reduce using rule 35 (stmt -> while_stmt .)
    -               reduce using rule 35 (stmt -> while_stmt .)
    !               reduce using rule 35 (stmt -> while_stmt .)
    }               reduce using rule 35 (stmt -> while_stmt .)
    ELSE            reduce using rule 35 (stmt -> while_stmt .)


state 121

    (36) stmt -> if_stmt .
    CONTINUE        reduce using rule 36 (stmt -> if_stmt .)
    BREAK           reduce using rule 36 (stmt -> if_stmt .)
    RETURN          reduce using rule 36 (stmt -> if_stmt .)
    WHILE           reduce using rule 36 (stmt -> if_stmt .)
    IF              reduce using rule 36 (stmt -> if_stmt .)
    {               reduce using rule 36 (stmt -> if_stmt .)
    ;               reduce using rule 36 (stmt -> if_stmt .)
    NEW             reduce using rule 36 (stmt -> if_stmt .)
    CHAR_LIT        reduce using rule 36 (stmt -> if_stmt .)
    STRING_LIT      reduce using rule 36 (stmt -> if_stmt .)
    FLOAT_LIT       reduce using rule 36 (stmt -> if_stmt .)
    INT_LIT         reduce using rule 36 (stmt -> if_stmt .)
    BOOL_LIT        reduce using rule 36 (stmt -> if_stmt .)
    IDENT           reduce using rule 36 (stmt -> if_stmt .)
    (               reduce using rule 36 (stmt -> if_stmt .)
    +               reduce using rule 36 (stmt -> if_stmt .)
    -               reduce using rule 36 (stmt -> if_stmt .)
    !               reduce using rule 36 (stmt -> if_stmt .)
    }               reduce using rule 36 (stmt -> if_stmt .)
    ELSE            reduce using rule 36 (stmt -> if_stmt .)


state 122

    (37) stmt -> compound_stmt .
    CONTINUE        reduce using rule 37 (stmt -> compound_stmt .)
    BREAK           reduce using rule 37 (stmt -> compound_stmt .)
    RETURN          reduce using rule 37 (stmt -> compound_stmt .)
    WHILE           reduce using rule 37 (stmt -> compound_stmt .)
    IF              reduce using rule 37 (stmt -> compound_stmt .)
    {               reduce using rule 37 (stmt -> compound_stmt .)
    ;               reduce using rule 37 (stmt -> compound_stmt .)
    NEW             reduce using rule 37 (stmt -> compound_stmt .)
    CHAR_LIT        reduce using rule 37 (stmt -> compound_stmt .)
    STRING_LIT      reduce using rule 37 (stmt -> compound_stmt .)
    FLOAT_LIT       reduce using rule 37 (stmt -> compound_stmt .)
    INT_LIT         reduce using rule 37 (stmt -> compound_stmt .)
    BOOL_LIT        reduce using rule 37 (stmt -> compound_stmt .)
    IDENT           reduce using rule 37 (stmt -> compound_stmt .)
    (               reduce using rule 37 (stmt -> compound_stmt .)
    +               reduce using rule 37 (stmt -> compound_stmt .)
    -               reduce using rule 37 (stmt -> compound_stmt .)
    !               reduce using rule 37 (stmt -> compound_stmt .)
    }               reduce using rule 37 (stmt -> compound_stmt .)
    ELSE            reduce using rule 37 (stmt -> compound_stmt .)


state 123

    (38) stmt -> expr_stmt .
    CONTINUE        reduce using rule 38 (stmt -> expr_stmt .)
    BREAK           reduce using rule 38 (stmt -> expr_stmt .)
    RETURN          reduce using rule 38 (stmt -> expr_stmt .)
    WHILE           reduce using rule 38 (stmt -> expr_stmt .)
    IF              reduce using rule 38 (stmt -> expr_stmt .)
    {               reduce using rule 38 (stmt -> expr_stmt .)
    ;               reduce using rule 38 (stmt -> expr_stmt .)
    NEW             reduce using rule 38 (stmt -> expr_stmt .)
    CHAR_LIT        reduce using rule 38 (stmt -> expr_stmt .)
    STRING_LIT      reduce using rule 38 (stmt -> expr_stmt .)
    FLOAT_LIT       reduce using rule 38 (stmt -> expr_stmt .)
    INT_LIT         reduce using rule 38 (stmt -> expr_stmt .)
    BOOL_LIT        reduce using rule 38 (stmt -> expr_stmt .)
    IDENT           reduce using rule 38 (stmt -> expr_stmt .)
    (               reduce using rule 38 (stmt -> expr_stmt .)
    +               reduce using rule 38 (stmt -> expr_stmt .)
    -               reduce using rule 38 (stmt -> expr_stmt .)
    !               reduce using rule 38 (stmt -> expr_stmt .)
    }               reduce using rule 38 (stmt -> expr_stmt .)
    ELSE            reduce using rule 38 (stmt -> expr_stmt .)


state 124

    (49) break_stmt -> CONTINUE . ;
    ;               shift and go to state 137


state 125

    (42) expr_stmt -> ; .
    CONTINUE        reduce using rule 42 (expr_stmt -> ; .)
    BREAK           reduce using rule 42 (expr_stmt -> ; .)
    RETURN          reduce using rule 42 (expr_stmt -> ; .)
    WHILE           reduce using rule 42 (expr_stmt -> ; .)
    IF              reduce using rule 42 (expr_stmt -> ; .)
    {               reduce using rule 42 (expr_stmt -> ; .)
    ;               reduce using rule 42 (expr_stmt -> ; .)
    NEW             reduce using rule 42 (expr_stmt -> ; .)
    CHAR_LIT        reduce using rule 42 (expr_stmt -> ; .)
    STRING_LIT      reduce using rule 42 (expr_stmt -> ; .)
    FLOAT_LIT       reduce using rule 42 (expr_stmt -> ; .)
    INT_LIT         reduce using rule 42 (expr_stmt -> ; .)
    BOOL_LIT        reduce using rule 42 (expr_stmt -> ; .)
    IDENT           reduce using rule 42 (expr_stmt -> ; .)
    (               reduce using rule 42 (expr_stmt -> ; .)
    +               reduce using rule 42 (expr_stmt -> ; .)
    -               reduce using rule 42 (expr_stmt -> ; .)
    !               reduce using rule 42 (expr_stmt -> ; .)
    }               reduce using rule 42 (expr_stmt -> ; .)
    ELSE            reduce using rule 42 (expr_stmt -> ; .)


state 126

    (50) break_stmt -> BREAK . ;
    ;               shift and go to state 138


state 127

    (47) return_stmt -> RETURN . ;
    (48) return_stmt -> RETURN . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    ;               shift and go to state 139
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 140

state 128

    (43) expr_stmt -> expr . ;
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ;               shift and go to state 141
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 129

    (44) while_stmt -> WHILE . ( expr ) stmt
    (               shift and go to state 142


state 130

    (45) if_stmt -> IF . ( expr ) stmt
    (46) if_stmt -> IF . ( expr ) stmt ELSE stmt
    (               shift and go to state 143


state 131

    (29) local_decls -> local_decl local_decls .
    CONTINUE        reduce using rule 29 (local_decls -> local_decl local_decls .)
    BREAK           reduce using rule 29 (local_decls -> local_decl local_decls .)
    RETURN          reduce using rule 29 (local_decls -> local_decl local_decls .)
    WHILE           reduce using rule 29 (local_decls -> local_decl local_decls .)
    IF              reduce using rule 29 (local_decls -> local_decl local_decls .)
    {               reduce using rule 29 (local_decls -> local_decl local_decls .)
    ;               reduce using rule 29 (local_decls -> local_decl local_decls .)
    NEW             reduce using rule 29 (local_decls -> local_decl local_decls .)
    CHAR_LIT        reduce using rule 29 (local_decls -> local_decl local_decls .)
    STRING_LIT      reduce using rule 29 (local_decls -> local_decl local_decls .)
    FLOAT_LIT       reduce using rule 29 (local_decls -> local_decl local_decls .)
    INT_LIT         reduce using rule 29 (local_decls -> local_decl local_decls .)
    BOOL_LIT        reduce using rule 29 (local_decls -> local_decl local_decls .)
    IDENT           reduce using rule 29 (local_decls -> local_decl local_decls .)
    (               reduce using rule 29 (local_decls -> local_decl local_decls .)
    +               reduce using rule 29 (local_decls -> local_decl local_decls .)
    -               reduce using rule 29 (local_decls -> local_decl local_decls .)
    !               reduce using rule 29 (local_decls -> local_decl local_decls .)
    }               reduce using rule 29 (local_decls -> local_decl local_decls .)


state 132

    (83) _2_0x2c_expr_optional -> , expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    )               reduce using rule 83 (_2_0x2c_expr_optional -> , expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 133

    (78) expr -> IDENT [ expr ] = . expr
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 144

state 134

    (51) expr -> NEW type_spec [ expr ] .
    ]               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    %               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    /               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    *               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    -               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    +               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    >               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    GE              reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    <               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    LE              reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    NE              reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    EQ              reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    AND             reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    OR              reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    ;               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    )               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)
    ,               reduce using rule 51 (expr -> NEW type_spec [ expr ] .)


state 135

    (27) compound_stmt -> { local_decls stmt_list } .
    CLASS           reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    CHAR            reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    DOUBLE          reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT           reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    INT             reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    BOOL            reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    VOID            reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    $end            reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    CONTINUE        reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    BREAK           reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    RETURN          reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    WHILE           reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    IF              reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    {               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    ;               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    NEW             reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    CHAR_LIT        reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    STRING_LIT      reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    FLOAT_LIT       reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    INT_LIT         reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    BOOL_LIT        reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    IDENT           reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    (               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    +               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    -               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    !               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    }               reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)
    ELSE            reduce using rule 27 (compound_stmt -> { local_decls stmt_list } .)


state 136

    (32) stmt_list -> stmt stmt_list .
    }               reduce using rule 32 (stmt_list -> stmt stmt_list .)


state 137

    (49) break_stmt -> CONTINUE ; .
    CONTINUE        reduce using rule 49 (break_stmt -> CONTINUE ; .)
    BREAK           reduce using rule 49 (break_stmt -> CONTINUE ; .)
    RETURN          reduce using rule 49 (break_stmt -> CONTINUE ; .)
    WHILE           reduce using rule 49 (break_stmt -> CONTINUE ; .)
    IF              reduce using rule 49 (break_stmt -> CONTINUE ; .)
    {               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    ;               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    NEW             reduce using rule 49 (break_stmt -> CONTINUE ; .)
    CHAR_LIT        reduce using rule 49 (break_stmt -> CONTINUE ; .)
    STRING_LIT      reduce using rule 49 (break_stmt -> CONTINUE ; .)
    FLOAT_LIT       reduce using rule 49 (break_stmt -> CONTINUE ; .)
    INT_LIT         reduce using rule 49 (break_stmt -> CONTINUE ; .)
    BOOL_LIT        reduce using rule 49 (break_stmt -> CONTINUE ; .)
    IDENT           reduce using rule 49 (break_stmt -> CONTINUE ; .)
    (               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    +               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    -               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    !               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    }               reduce using rule 49 (break_stmt -> CONTINUE ; .)
    ELSE            reduce using rule 49 (break_stmt -> CONTINUE ; .)


state 138

    (50) break_stmt -> BREAK ; .
    CONTINUE        reduce using rule 50 (break_stmt -> BREAK ; .)
    BREAK           reduce using rule 50 (break_stmt -> BREAK ; .)
    RETURN          reduce using rule 50 (break_stmt -> BREAK ; .)
    WHILE           reduce using rule 50 (break_stmt -> BREAK ; .)
    IF              reduce using rule 50 (break_stmt -> BREAK ; .)
    {               reduce using rule 50 (break_stmt -> BREAK ; .)
    ;               reduce using rule 50 (break_stmt -> BREAK ; .)
    NEW             reduce using rule 50 (break_stmt -> BREAK ; .)
    CHAR_LIT        reduce using rule 50 (break_stmt -> BREAK ; .)
    STRING_LIT      reduce using rule 50 (break_stmt -> BREAK ; .)
    FLOAT_LIT       reduce using rule 50 (break_stmt -> BREAK ; .)
    INT_LIT         reduce using rule 50 (break_stmt -> BREAK ; .)
    BOOL_LIT        reduce using rule 50 (break_stmt -> BREAK ; .)
    IDENT           reduce using rule 50 (break_stmt -> BREAK ; .)
    (               reduce using rule 50 (break_stmt -> BREAK ; .)
    +               reduce using rule 50 (break_stmt -> BREAK ; .)
    -               reduce using rule 50 (break_stmt -> BREAK ; .)
    !               reduce using rule 50 (break_stmt -> BREAK ; .)
    }               reduce using rule 50 (break_stmt -> BREAK ; .)
    ELSE            reduce using rule 50 (break_stmt -> BREAK ; .)


state 139

    (47) return_stmt -> RETURN ; .
    CONTINUE        reduce using rule 47 (return_stmt -> RETURN ; .)
    BREAK           reduce using rule 47 (return_stmt -> RETURN ; .)
    RETURN          reduce using rule 47 (return_stmt -> RETURN ; .)
    WHILE           reduce using rule 47 (return_stmt -> RETURN ; .)
    IF              reduce using rule 47 (return_stmt -> RETURN ; .)
    {               reduce using rule 47 (return_stmt -> RETURN ; .)
    ;               reduce using rule 47 (return_stmt -> RETURN ; .)
    NEW             reduce using rule 47 (return_stmt -> RETURN ; .)
    CHAR_LIT        reduce using rule 47 (return_stmt -> RETURN ; .)
    STRING_LIT      reduce using rule 47 (return_stmt -> RETURN ; .)
    FLOAT_LIT       reduce using rule 47 (return_stmt -> RETURN ; .)
    INT_LIT         reduce using rule 47 (return_stmt -> RETURN ; .)
    BOOL_LIT        reduce using rule 47 (return_stmt -> RETURN ; .)
    IDENT           reduce using rule 47 (return_stmt -> RETURN ; .)
    (               reduce using rule 47 (return_stmt -> RETURN ; .)
    +               reduce using rule 47 (return_stmt -> RETURN ; .)
    -               reduce using rule 47 (return_stmt -> RETURN ; .)
    !               reduce using rule 47 (return_stmt -> RETURN ; .)
    }               reduce using rule 47 (return_stmt -> RETURN ; .)
    ELSE            reduce using rule 47 (return_stmt -> RETURN ; .)


state 140

    (48) return_stmt -> RETURN expr . ;
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ;               shift and go to state 145
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 141

    (43) expr_stmt -> expr ; .
    CONTINUE        reduce using rule 43 (expr_stmt -> expr ; .)
    BREAK           reduce using rule 43 (expr_stmt -> expr ; .)
    RETURN          reduce using rule 43 (expr_stmt -> expr ; .)
    WHILE           reduce using rule 43 (expr_stmt -> expr ; .)
    IF              reduce using rule 43 (expr_stmt -> expr ; .)
    {               reduce using rule 43 (expr_stmt -> expr ; .)
    ;               reduce using rule 43 (expr_stmt -> expr ; .)
    NEW             reduce using rule 43 (expr_stmt -> expr ; .)
    CHAR_LIT        reduce using rule 43 (expr_stmt -> expr ; .)
    STRING_LIT      reduce using rule 43 (expr_stmt -> expr ; .)
    FLOAT_LIT       reduce using rule 43 (expr_stmt -> expr ; .)
    INT_LIT         reduce using rule 43 (expr_stmt -> expr ; .)
    BOOL_LIT        reduce using rule 43 (expr_stmt -> expr ; .)
    IDENT           reduce using rule 43 (expr_stmt -> expr ; .)
    (               reduce using rule 43 (expr_stmt -> expr ; .)
    +               reduce using rule 43 (expr_stmt -> expr ; .)
    -               reduce using rule 43 (expr_stmt -> expr ; .)
    !               reduce using rule 43 (expr_stmt -> expr ; .)
    }               reduce using rule 43 (expr_stmt -> expr ; .)
    ELSE            reduce using rule 43 (expr_stmt -> expr ; .)


state 142

    (44) while_stmt -> WHILE ( . expr ) stmt
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 146

state 143

    (45) if_stmt -> IF ( . expr ) stmt
    (46) if_stmt -> IF ( . expr ) stmt ELSE stmt
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 147

state 144

    (78) expr -> IDENT [ expr ] = expr .
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    ]               reduce using rule 78 (expr -> IDENT [ expr ] = expr .)
    ;               reduce using rule 78 (expr -> IDENT [ expr ] = expr .)
    )               reduce using rule 78 (expr -> IDENT [ expr ] = expr .)
    ,               reduce using rule 78 (expr -> IDENT [ expr ] = expr .)
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 145

    (48) return_stmt -> RETURN expr ; .
    CONTINUE        reduce using rule 48 (return_stmt -> RETURN expr ; .)
    BREAK           reduce using rule 48 (return_stmt -> RETURN expr ; .)
    RETURN          reduce using rule 48 (return_stmt -> RETURN expr ; .)
    WHILE           reduce using rule 48 (return_stmt -> RETURN expr ; .)
    IF              reduce using rule 48 (return_stmt -> RETURN expr ; .)
    {               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    ;               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    NEW             reduce using rule 48 (return_stmt -> RETURN expr ; .)
    CHAR_LIT        reduce using rule 48 (return_stmt -> RETURN expr ; .)
    STRING_LIT      reduce using rule 48 (return_stmt -> RETURN expr ; .)
    FLOAT_LIT       reduce using rule 48 (return_stmt -> RETURN expr ; .)
    INT_LIT         reduce using rule 48 (return_stmt -> RETURN expr ; .)
    BOOL_LIT        reduce using rule 48 (return_stmt -> RETURN expr ; .)
    IDENT           reduce using rule 48 (return_stmt -> RETURN expr ; .)
    (               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    +               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    -               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    !               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    }               reduce using rule 48 (return_stmt -> RETURN expr ; .)
    ELSE            reduce using rule 48 (return_stmt -> RETURN expr ; .)


state 146

    (44) while_stmt -> WHILE ( expr . ) stmt
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    )               shift and go to state 148
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 147

    (45) if_stmt -> IF ( expr . ) stmt
    (46) if_stmt -> IF ( expr . ) stmt ELSE stmt
    (65) expr -> expr . % expr
    (66) expr -> expr . / expr
    (67) expr -> expr . * expr
    (68) expr -> expr . - expr
    (69) expr -> expr . + expr
    (70) expr -> expr . > expr
    (71) expr -> expr . GE expr
    (72) expr -> expr . < expr
    (73) expr -> expr . LE expr
    (74) expr -> expr . NE expr
    (75) expr -> expr . EQ expr
    (76) expr -> expr . AND expr
    (77) expr -> expr . OR expr
    )               shift and go to state 149
    %               shift and go to state 58
    /               shift and go to state 59
    *               shift and go to state 60
    -               shift and go to state 61
    +               shift and go to state 62
    >               shift and go to state 63
    GE              shift and go to state 64
    <               shift and go to state 65
    LE              shift and go to state 66
    NE              shift and go to state 67
    EQ              shift and go to state 68
    AND             shift and go to state 69
    OR              shift and go to state 70


state 148

    (44) while_stmt -> WHILE ( expr ) . stmt
    (33) stmt -> . break_stmt
    (34) stmt -> . return_stmt
    (35) stmt -> . while_stmt
    (36) stmt -> . if_stmt
    (37) stmt -> . compound_stmt
    (38) stmt -> . expr_stmt
    (49) break_stmt -> . CONTINUE ;
    (50) break_stmt -> . BREAK ;
    (47) return_stmt -> . RETURN ;
    (48) return_stmt -> . RETURN expr ;
    (44) while_stmt -> . WHILE ( expr ) stmt
    (45) if_stmt -> . IF ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    (42) expr_stmt -> . ;
    (43) expr_stmt -> . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    WHILE           shift and go to state 129
    IF              shift and go to state 130
    {               shift and go to state 79
    ;               shift and go to state 125
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 128
    stmt                           shift and go to state 150
    break_stmt                     shift and go to state 118
    return_stmt                    shift and go to state 119
    while_stmt                     shift and go to state 120
    if_stmt                        shift and go to state 121
    compound_stmt                  shift and go to state 122
    expr_stmt                      shift and go to state 123

state 149

    (45) if_stmt -> IF ( expr ) . stmt
    (46) if_stmt -> IF ( expr ) . stmt ELSE stmt
    (33) stmt -> . break_stmt
    (34) stmt -> . return_stmt
    (35) stmt -> . while_stmt
    (36) stmt -> . if_stmt
    (37) stmt -> . compound_stmt
    (38) stmt -> . expr_stmt
    (49) break_stmt -> . CONTINUE ;
    (50) break_stmt -> . BREAK ;
    (47) return_stmt -> . RETURN ;
    (48) return_stmt -> . RETURN expr ;
    (44) while_stmt -> . WHILE ( expr ) stmt
    (45) if_stmt -> . IF ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    (42) expr_stmt -> . ;
    (43) expr_stmt -> . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    WHILE           shift and go to state 129
    IF              shift and go to state 130
    {               shift and go to state 79
    ;               shift and go to state 125
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 128
    stmt                           shift and go to state 151
    break_stmt                     shift and go to state 118
    return_stmt                    shift and go to state 119
    while_stmt                     shift and go to state 120
    if_stmt                        shift and go to state 121
    compound_stmt                  shift and go to state 122
    expr_stmt                      shift and go to state 123

state 150

    (44) while_stmt -> WHILE ( expr ) stmt .
    CONTINUE        reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    BREAK           reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    RETURN          reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    WHILE           reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    IF              reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    {               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    ;               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    NEW             reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    CHAR_LIT        reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    STRING_LIT      reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    INT_LIT         reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    BOOL_LIT        reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    IDENT           reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    (               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    +               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    -               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    !               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    }               reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)
    ELSE            reduce using rule 44 (while_stmt -> WHILE ( expr ) stmt .)


state 151

    (45) if_stmt -> IF ( expr ) stmt .
    (46) if_stmt -> IF ( expr ) stmt . ELSE stmt
    CONTINUE        reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    BREAK           reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    RETURN          reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    WHILE           reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    IF              reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    {               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    ;               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    NEW             reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    CHAR_LIT        reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    STRING_LIT      reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    FLOAT_LIT       reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    INT_LIT         reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    BOOL_LIT        reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    IDENT           reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    (               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    +               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    -               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    !               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    }               reduce using rule 45 (if_stmt -> IF ( expr ) stmt .)
    ELSE            shift and go to state 152


state 152

    (46) if_stmt -> IF ( expr ) stmt ELSE . stmt
    (33) stmt -> . break_stmt
    (34) stmt -> . return_stmt
    (35) stmt -> . while_stmt
    (36) stmt -> . if_stmt
    (37) stmt -> . compound_stmt
    (38) stmt -> . expr_stmt
    (49) break_stmt -> . CONTINUE ;
    (50) break_stmt -> . BREAK ;
    (47) return_stmt -> . RETURN ;
    (48) return_stmt -> . RETURN expr ;
    (44) while_stmt -> . WHILE ( expr ) stmt
    (45) if_stmt -> . IF ( expr ) stmt
    (46) if_stmt -> . IF ( expr ) stmt ELSE stmt
    (27) compound_stmt -> . { local_decls stmt_list }
    (42) expr_stmt -> . ;
    (43) expr_stmt -> . expr ;
    (51) expr -> . NEW type_spec [ expr ]
    (52) expr -> . CHAR_LIT
    (53) expr -> . STRING_LIT
    (54) expr -> . FLOAT_LIT
    (55) expr -> . INT_LIT
    (56) expr -> . BOOL_LIT
    (57) expr -> . IDENT . SIZE
    (58) expr -> . IDENT ( args )
    (59) expr -> . IDENT [ expr ]
    (60) expr -> . IDENT
    (61) expr -> . ( expr )
    (62) expr -> . + expr
    (63) expr -> . - expr
    (64) expr -> . ! expr
    (65) expr -> . expr % expr
    (66) expr -> . expr / expr
    (67) expr -> . expr * expr
    (68) expr -> . expr - expr
    (69) expr -> . expr + expr
    (70) expr -> . expr > expr
    (71) expr -> . expr GE expr
    (72) expr -> . expr < expr
    (73) expr -> . expr LE expr
    (74) expr -> . expr NE expr
    (75) expr -> . expr EQ expr
    (76) expr -> . expr AND expr
    (77) expr -> . expr OR expr
    (78) expr -> . IDENT [ expr ] = expr
    (79) expr -> . IDENT = expr
    CONTINUE        shift and go to state 124
    BREAK           shift and go to state 126
    RETURN          shift and go to state 127
    WHILE           shift and go to state 129
    IF              shift and go to state 130
    {               shift and go to state 79
    ;               shift and go to state 125
    NEW             shift and go to state 33
    CHAR_LIT        shift and go to state 34
    STRING_LIT      shift and go to state 35
    FLOAT_LIT       shift and go to state 36
    INT_LIT         shift and go to state 37
    BOOL_LIT        shift and go to state 38
    IDENT           shift and go to state 31
    (               shift and go to state 39
    +               shift and go to state 40
    -               shift and go to state 41
    !               shift and go to state 42

    expr                           shift and go to state 128
    stmt                           shift and go to state 153
    break_stmt                     shift and go to state 118
    return_stmt                    shift and go to state 119
    while_stmt                     shift and go to state 120
    if_stmt                        shift and go to state 121
    compound_stmt                  shift and go to state 122
    expr_stmt                      shift and go to state 123

state 153

    (46) if_stmt -> IF ( expr ) stmt ELSE stmt .
    CONTINUE        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BREAK           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    RETURN          reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    WHILE           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IF              reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    {               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ;               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    NEW             reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    CHAR_LIT        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    STRING_LIT      reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    FLOAT_LIT       reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    INT_LIT         reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    BOOL_LIT        reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    IDENT           reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    (               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    +               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    -               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    !               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    }               reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
    ELSE            reduce using rule 46 (if_stmt -> IF ( expr ) stmt ELSE stmt .)
